[
  {
    "objectID": "proposal.html",
    "href": "proposal.html",
    "title": "EchoScope‚Ñ¢",
    "section": "",
    "text": "EchoScope‚Ñ¢ ‚Äî A Visual Analytics Prototype for Music Influence Exploration\n\n\n\n\n\n\nThe music industry lacks intuitive tools to visually trace influence, discover emerging talents, and understand genre diffusion. Existing dashboards are often statistical, but not exploratory or network-driven.\n\n\n\nUsing Mini-Challenge 1 (VAST 2025) data, we propose EchoScope ‚Äî a visual analytics tool to explore Sailor Shift‚Äôs influence and the rise of Oceanus Folk through interactive visualizations built with Shiny and network graphs.\n\n\n\nTo build this system, we analyzed:\n\n17,000+ nodes representing artists, genres, producers, and songs\n\n37,000+ edges including collaboration, stylistic influence, production, and genre classification\n\nKey fields: notoriety_date, notable, InStyleOf, PerformerOf, genre\n\n\n\n\n\n\nEchoScope‚Ñ¢ is a conceptual SaaS-like platform that combines:\n\nMusic knowledge graphs\n\nGenre diffusion analysis\n\nArtist influence scoring\n\nIt is designed to simulate a data product that helps:\n\nüéß Music platforms discover new talents\n\nüè∑Ô∏è Labels map influence networks\n\nüìä Brands and analysts follow genre evolution\n\n\nüéØ Vision: Use visual analytics + graph intelligence to discover the next ‚ÄúSailor Shift.‚Äù\n\n\n\n\n\nWe treat Mini-Challenge 1 as a real-world business question:\n\nHow can we analyze the career of Sailor Shift and uncover the influence of Oceanus Folk?\n\nEchoScope addresses this through exploratory visual analytics features.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nModule Name\nFunctionality\nBusiness Value\n\n\n\n\nüéº Influence Graph Studio\nBuilds 1‚Äì3 hop influence network from Sailor and others\nUnderstand artist leverage and collaboration value\n\n\nüî• Genre Diffusion Tracker\nTracks Oceanus Folk‚Äôs stylistic evolution and diffusion\nReveal cultural trends and genre crossovers\n\n\nüöÄ Talent Score Engine\nPredicts future breakout artists using graph and song metrics\nHelps in signing, scouting, and artist incubation\n\n\nüìä Trend Analytics Dashboard\nGenerates interactive genre/artist/time reports\nAssists marketing, content, and PR strategies\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScenario\nRole\nInteraction Description\n\n\n\n\nTalent Scouting\nA&R Manager\nInput genre ‚Üí Get Top 10 rising stars with influence score\n\n\nCampaign Planning\nMarketing\nFilter by region + trend ‚Üí Identify target collaborations\n\n\nBrand Matching\nBrand Lead\nUse graph to explore matching artist style\n\n\nCatalog Curation\nMusic Editor\nTrack genre evolution to curate songs accordingly\n\n\n\n\n\n\n\n\n\n\nQuarter\nGoal\n\n\n\n\nQ1\nBuild V1 prototype (Oceanus Folk + Sailor graph)\n\n\nQ2\nAdd scoring model and timeline charts\n\n\nQ3\nExpand genres and add user customization options\n\n\nQ4\nDemo full use case with Shiny + deployment-ready site\n\n\n\n\n\n\n\n\nData Analytics: Graph modeling, centrality, genre signal detection\n\nShiny Prototyping: Frontend layout, visual rendering, interactivity\n\n\nEchoScope is not just a course project ‚Äî it simulates how visual analytics can empower cultural discovery.\n\n\n\n\n\n\n\n\n\nHome ‚Äì Project description, Sailor Shift bio, goal overview\n\nInfluence Graph ‚Äì Dynamic visNetwork with adjustable depth, filters by genre/year\n\nGenre Diffusion ‚Äì Interactive timeline and genre flow chart\n\nTalent Radar ‚Äì Artist radar chart based on scoring algorithm, download option\n\nAbout ‚Äì Team roles, methodology, and reflection\n\n\n\n\n\n\n\n\n\n\n\nInput Controls\nOutput Visualizations\n\n\n\n\nSelect Artist / Node\nInteractive network (1‚Äì3 hop ego graph)\n\n\nChoose Time Range\nTimeline chart, genre progression map\n\n\nFilter by Genre / Notability\nTalent radar score & filtered influence list\n\n\nDownload Panel\nExport PNG/PDF/CSV from each module\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUI prototype for Genre Diffusion Tracker"
  },
  {
    "objectID": "proposal.html#echoscope-leveraging-visual-analytics-graph-intelligence-to-explore-music-influence-with-sailor-shift",
    "href": "proposal.html#echoscope-leveraging-visual-analytics-graph-intelligence-to-explore-music-influence-with-sailor-shift",
    "title": "EchoScope‚Ñ¢",
    "section": "",
    "text": "EchoScope‚Ñ¢ ‚Äî A Visual Analytics Prototype for Music Influence Exploration\n\n\n\n\n\n\nThe music industry lacks intuitive tools to visually trace influence, discover emerging talents, and understand genre diffusion. Existing dashboards are often statistical, but not exploratory or network-driven.\n\n\n\nUsing Mini-Challenge 1 (VAST 2025) data, we propose EchoScope ‚Äî a visual analytics tool to explore Sailor Shift‚Äôs influence and the rise of Oceanus Folk through interactive visualizations built with Shiny and network graphs.\n\n\n\nTo build this system, we analyzed:\n\n17,000+ nodes representing artists, genres, producers, and songs\n\n37,000+ edges including collaboration, stylistic influence, production, and genre classification\n\nKey fields: notoriety_date, notable, InStyleOf, PerformerOf, genre\n\n\n\n\n\n\nEchoScope‚Ñ¢ is a conceptual SaaS-like platform that combines:\n\nMusic knowledge graphs\n\nGenre diffusion analysis\n\nArtist influence scoring\n\nIt is designed to simulate a data product that helps:\n\nüéß Music platforms discover new talents\n\nüè∑Ô∏è Labels map influence networks\n\nüìä Brands and analysts follow genre evolution\n\n\nüéØ Vision: Use visual analytics + graph intelligence to discover the next ‚ÄúSailor Shift.‚Äù\n\n\n\n\n\nWe treat Mini-Challenge 1 as a real-world business question:\n\nHow can we analyze the career of Sailor Shift and uncover the influence of Oceanus Folk?\n\nEchoScope addresses this through exploratory visual analytics features.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nModule Name\nFunctionality\nBusiness Value\n\n\n\n\nüéº Influence Graph Studio\nBuilds 1‚Äì3 hop influence network from Sailor and others\nUnderstand artist leverage and collaboration value\n\n\nüî• Genre Diffusion Tracker\nTracks Oceanus Folk‚Äôs stylistic evolution and diffusion\nReveal cultural trends and genre crossovers\n\n\nüöÄ Talent Score Engine\nPredicts future breakout artists using graph and song metrics\nHelps in signing, scouting, and artist incubation\n\n\nüìä Trend Analytics Dashboard\nGenerates interactive genre/artist/time reports\nAssists marketing, content, and PR strategies\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScenario\nRole\nInteraction Description\n\n\n\n\nTalent Scouting\nA&R Manager\nInput genre ‚Üí Get Top 10 rising stars with influence score\n\n\nCampaign Planning\nMarketing\nFilter by region + trend ‚Üí Identify target collaborations\n\n\nBrand Matching\nBrand Lead\nUse graph to explore matching artist style\n\n\nCatalog Curation\nMusic Editor\nTrack genre evolution to curate songs accordingly\n\n\n\n\n\n\n\n\n\n\nQuarter\nGoal\n\n\n\n\nQ1\nBuild V1 prototype (Oceanus Folk + Sailor graph)\n\n\nQ2\nAdd scoring model and timeline charts\n\n\nQ3\nExpand genres and add user customization options\n\n\nQ4\nDemo full use case with Shiny + deployment-ready site\n\n\n\n\n\n\n\n\nData Analytics: Graph modeling, centrality, genre signal detection\n\nShiny Prototyping: Frontend layout, visual rendering, interactivity\n\n\nEchoScope is not just a course project ‚Äî it simulates how visual analytics can empower cultural discovery.\n\n\n\n\n\n\n\n\n\nHome ‚Äì Project description, Sailor Shift bio, goal overview\n\nInfluence Graph ‚Äì Dynamic visNetwork with adjustable depth, filters by genre/year\n\nGenre Diffusion ‚Äì Interactive timeline and genre flow chart\n\nTalent Radar ‚Äì Artist radar chart based on scoring algorithm, download option\n\nAbout ‚Äì Team roles, methodology, and reflection\n\n\n\n\n\n\n\n\n\n\n\nInput Controls\nOutput Visualizations\n\n\n\n\nSelect Artist / Node\nInteractive network (1‚Äì3 hop ego graph)\n\n\nChoose Time Range\nTimeline chart, genre progression map\n\n\nFilter by Genre / Notability\nTalent radar score & filtered influence list\n\n\nDownload Panel\nExport PNG/PDF/CSV from each module\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUI prototype for Genre Diffusion Tracker"
  },
  {
    "objectID": "proposal.html#project-schedule",
    "href": "proposal.html#project-schedule",
    "title": "EchoScope‚Ñ¢",
    "section": "Project Schedule",
    "text": "Project Schedule\nBelow is an overview of our project timeline.\n\n\nCode\nlibrary(tidyverse)\nlibrary(lubridate)\n\n# ‰ªªÂä°ÊéíÊúü\nschedule_df &lt;- tibble(\n  task = c(\n    \"Proposal Brainstorming\", \"Proposal Editing & Publishing\",\n    \"R Quarto / Netlify Setup\", \"R Shiny App Development\",\n    \"User Guide Drafting\", \"Poster Design\", \"Poster Uploading\",\n    \"Poster Presentation\", \"Final Submission\"\n  ),\n  start = as.Date(c(\n    \"2025-06-01\", \"2025-06-05\", \"2025-06-09\", \"2025-06-18\",\n    \"2025-06-22\", \"2025-06-10\", \"2025-06-25\", \"2025-07-02\", \"2025-06-28\"\n  )),\n  end = as.Date(c(\n    \"2025-06-04\", \"2025-06-08\", \"2025-06-14\", \"2025-06-27\",\n    \"2025-06-30\", \"2025-06-24\", \"2025-06-26\", \"2025-07-02\", \"2025-07-06\"\n  )),\n  category = c(\n    \"Proposal\", \"Proposal\", \"Development\", \"Development\",\n    \"Documentation\", \"Poster\", \"Poster\", \"Presentation\", \"Submission\"\n  )\n)\n\n# ÂÖ≥ÈîÆÊó•Êúü\ndue_dates &lt;- tibble(\n  label = c(\"Due 8 Jun\", \"Due 26 Jun\", \"Due 2 Jul\", \"Due 6 Jul\"),\n  date = as.Date(c(\"2025-06-08\", \"2025-06-26\", \"2025-07-02\", \"2025-07-06\"))\n)\n\n# Êó•ÊúüÊ†áÊ≥®È¢ùÂ§ñÂ≠óÊÆµÔºàÂ±ïÁ§∫ÂÆåÊï¥Êó•ÊúüÔºâ\ndue_dates &lt;- due_dates %&gt;%\n  mutate(date_str = format(date, \"%b %d\"))\n\n# È¢úËâ≤\ncolors &lt;- c(\n  \"Proposal\" = \"#1b9e77\", \"Development\" = \"#d95f02\", \"Documentation\" = \"#7570b3\",\n  \"Poster\" = \"#e7298a\", \"Presentation\" = \"#66a61e\", \"Submission\" = \"#e6ab02\"\n)\n\nmax_y &lt;- length(unique(schedule_df$task)) + 1\n\n# ÁªòÂõæ\nggplot(schedule_df, aes(x = start, xend = end, y = task, yend = task, color = category)) +\n  geom_segment(size = 6, lineend = \"round\") +\n  geom_vline(data = due_dates, aes(xintercept = date), color = \"red\", linetype = \"dashed\") +\n  geom_text(\n    data = due_dates,\n    mapping = aes(x = date, label = paste(label, \"\\n\", date_str)),\n    y = max_y,\n    inherit.aes = FALSE,\n    color = \"red\", size = 3.5, vjust = 0\n  ) +\n  scale_color_manual(values = colors) +\n  labs(title = \"EchoScope Project Timeline\", x = \"Date\", y = \"Task\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"right\",\n    plot.title = element_text(size = 14, face = \"bold\")\n  )"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\nCode\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EchoScope‚Ñ¢ ‚Äî Discovering Music Influence Through Visual Analytics",
    "section": "",
    "text": "Discovering music influence and rising stars through interactive visual analytics"
  },
  {
    "objectID": "index.html#welcome-to-echoscope",
    "href": "index.html#welcome-to-echoscope",
    "title": "EchoScope‚Ñ¢ ‚Äî Discovering Music Influence Through Visual Analytics",
    "section": "üéß Welcome to EchoScope‚Ñ¢",
    "text": "üéß Welcome to EchoScope‚Ñ¢\nEchoScope‚Ñ¢ is a web-based visual analytics prototype built for the ISSS608 Visual Analytics course project. It uses VAST 2025 Mini-Challenge 1 data to explore the artistic evolution of Sailor Shift and the influence of Oceanus Folk on global music.\nOur dashboard simulates a modern SaaS platform, offering interactive graphs and dashboards similar in experience to Apple Music, allowing music analysts, A&R managers, and cultural researchers to explore trends and talent."
  },
  {
    "objectID": "index.html#project-goals",
    "href": "index.html#project-goals",
    "title": "EchoScope‚Ñ¢ ‚Äî Discovering Music Influence Through Visual Analytics",
    "section": "üîç Project Goals",
    "text": "üîç Project Goals\n\nTrace influence paths of iconic artists\nAnalyze the genre evolution of Oceanus Folk\nPredict rising stars based on data and influence scores\nDemonstrate how network science and visual analytics can support cultural insight"
  },
  {
    "objectID": "index.html#case-data-sample",
    "href": "index.html#case-data-sample",
    "title": "EchoScope‚Ñ¢ ‚Äî Discovering Music Influence Through Visual Analytics",
    "section": "üìÇ Case Data Sample",
    "text": "üìÇ Case Data Sample\n\n17,000+ nodes: artists, genres, songs, producers\n37,000+ edges: performer links, stylistic influence, collaborations\nKey attributes: notoriety_date, PerformerOf, InStyleOf, genre, notable"
  },
  {
    "objectID": "index.html#functional-modules",
    "href": "index.html#functional-modules",
    "title": "EchoScope‚Ñ¢ ‚Äî Discovering Music Influence Through Visual Analytics",
    "section": "üß© Functional Modules",
    "text": "üß© Functional Modules\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD | Module Name | Functionality | |‚Äî-|‚Äî-| ======= | Module Name | Functionality | |‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-|‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì| &gt;&gt;&gt;&gt;&gt;&gt;&gt; 7ce45541aabb146f0a8c75369cf6897f40c9eb53 | üéº Influence Graph | Explore Sailor‚Äôs direct and indirect connections (1‚Äì3 hops) | | üî• Genre Diffusion | Visualize timeline trends of Oceanus Folk across decades | | üöÄ Talent Radar | Identify breakout artists via composite scoring | | üìä Trend Dashboard | Analyze stylistic output by genre, artist, and time |"
  },
  {
    "objectID": "index.html#explore-the-dashboard",
    "href": "index.html#explore-the-dashboard",
    "title": "EchoScope‚Ñ¢ ‚Äî Discovering Music Influence Through Visual Analytics",
    "section": "üí° Explore the Dashboard",
    "text": "üí° Explore the Dashboard\nClick the tabs in the navigation bar to interact with each module:\n\nInfluence Graph ‚Äì Dynamic visNetwork graph of Sailor Shift‚Äôs artistic web\nGenre Diffusion ‚Äì Area chart + stacked plot of evolving genres\nTalent Radar ‚Äì Radar comparison of rising artists\nAbout ‚Äì Methodology, team, and acknowledgments"
  },
  {
    "objectID": "index.html#interface-preview",
    "href": "index.html#interface-preview",
    "title": "EchoScope‚Ñ¢ ‚Äî Discovering Music Influence Through Visual Analytics",
    "section": "üñºÔ∏è Interface Preview",
    "text": "üñºÔ∏è Interface Preview"
  },
  {
    "objectID": "index.html#built-with",
    "href": "index.html#built-with",
    "title": "EchoScope‚Ñ¢ ‚Äî Discovering Music Influence Through Visual Analytics",
    "section": "üë®‚Äçüéì Built With",
    "text": "üë®‚Äçüéì Built With\n\nQuarto + Shiny\nnetworkx, visNetwork, plotly, echarts4r\nDesigned with an Apple Music-inspired aesthetic\n\n\n¬© 2025 EchoScope Project ‚Äî Created for academic purposes under SMU ISSS608"
  },
  {
    "objectID": "Storyboard.html",
    "href": "Storyboard.html",
    "title": "EchoScope‚Ñ¢ Prototype Storyboard",
    "section": "",
    "text": "EchoScope‚Ñ¢ is a visual analytics prototype designed to analyze artist influence, genre diffusion, and talent discovery through interactive dashboards and knowledge graph exploration.\n\n\n\n\nBefore diving into the individual UI panels, here‚Äôs a quick summary of the R packages we load and the core data-preprocessing steps used throughout EchoScope‚Ñ¢. Click Show to expand.\n\n\n\nShow libraries & data-prep code\n\n# ‚Äî‚Äî‚Äî R Packages ‚Äî‚Äî‚Äî\n\n# ‚Äî‚Äî‚Äî Shiny & UI ‚Äî‚Äî‚Äî\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(shinyWidgets)\n\n# ‚Äî‚Äî‚Äî Data wrangling ‚Äî‚Äî‚Äî\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(jsonlite)\nlibrary(lubridate)\nlibrary(scales)\n\n# ‚Äî‚Äî‚Äî Tables & plotting ‚Äî‚Äî‚Äî\nlibrary(DT)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# ‚Äî‚Äî‚Äî Network analysis ‚Äî‚Äî‚Äî\nlibrary(visNetwork)\nlibrary(tidygraph)\nlibrary(igraph)\n\n# ‚Äî‚Äî‚Äî Influence Graph Data Prep ‚Äî‚Äî‚Äî\n\n# 1) Load graph JSON\nkg        &lt;- fromJSON(\"data/MC1_graph.json\")\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)\n\n# 2) Build index map\nid_map &lt;- tibble(\n  id    = nodes_tbl$id,\n  index = seq_len(nrow(nodes_tbl))\n)\n\n# 3) Translate source/target ‚Üí from/to\nedges_tbl_graph &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;% rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;% rename(to   = index) %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n# 4) Create tidygraph object\ng_tbl &lt;- tbl_graph(\n  nodes    = nodes_tbl %&gt;% rename(node_name = name) %&gt;% mutate(index = row_number()),\n  edges    = edges_tbl_graph,\n  directed = TRUE\n)\n\n# 5) Subnetwork extraction helper\nextract_subnetwork &lt;- function(graph, node_name,\n                               distance = NULL,\n                               direction = c(\"all\",\"in\",\"out\"),\n                               edge_types = NULL,\n                               node_types = NULL) {\n  direction &lt;- match.arg(direction)\n  v_idx     &lt;- which(V(graph)$name == node_name)\n  vids      &lt;- ego(graph, v_idx, order = distance %||% length(graph),\n                   mode = direction)[[1]]\n  sg        &lt;- induced_subgraph(graph, vids)\n  nd        &lt;- as_data_frame(sg, what = \"vertices\")\n  ed        &lt;- as_data_frame(sg, what = \"edges\")\n  if (!is.null(edge_types)) ed &lt;- ed[ed$`Edge Type` %in% edge_types, ]\n  if (!is.null(node_types)) nd &lt;- nd[nd$`Node Type` %in% node_types, ]\n  tidygraph::tbl_graph(nodes = nd, edges = ed, directed = is_directed(graph))\n}\n\n# 6) Talent scoring function\nprepare_talent_score_from_graph &lt;- function(g_tbl) {\n  nodes &lt;- as_tibble(g_tbl, active = \"nodes\")\n  edges &lt;- as_tibble(g_tbl, active = \"edges\")\n\n  # Identify notable works\n  notable_work_ids &lt;- nodes %&gt;%\n    filter(`Node Type` %in% c(\"Song\",\"Album\"), notable == TRUE) %&gt;%\n    pull(index)\n\n  # Identify contributing persons\n  person_edge_types &lt;- c(\"PerformerOf\",\"ComposerOf\",\"ProducerOf\",\"LyricistOf\")\n  contributing_persons &lt;- edges %&gt;%\n    filter(to %in% notable_work_ids, `Edge Type` %in% person_edge_types) %&gt;%\n    pull(from) %&gt;% unique()\n\n  # Prepare person dataframe with recency & label\n  person_df &lt;- nodes %&gt;%\n    filter(`Node Type` == \"Person\") %&gt;%\n    select(index, label = node_name, notoriety_date, genre) %&gt;%\n    mutate(\n      notoriety_year   = as.numeric(substr(notoriety_date,1,4)),\n      notoriety_recency = pmax(0, 1 - (2025 - notoriety_year) / 20),\n      notable_label     = as.integer(index %in% contributing_persons)\n    )\n\n  # Add graph features\n  graph_feat &lt;- g_tbl %&gt;%\n    activate(nodes) %&gt;%\n    mutate(degree = centrality_degree(), pagerank = centrality_pagerank())\n  feat &lt;- as_tibble(graph_feat, active = \"nodes\") %&gt;%\n    filter(`Node Type` == \"Person\") %&gt;%\n    select(index, degree, pagerank)\n\n  # Merge features\n  features &lt;- person_df %&gt;%\n    left_join(feat, by = \"index\") %&gt;%\n    mutate(across(c(degree,pagerank,notoriety_recency), ~replace_na(.,0)))\n\n  # Train logistic regression\n  if (nrow(features) &lt; 10 || length(unique(features$notable_label)) &lt; 2)\n    stop(\"Insufficient training data or no positive/negative samples.\")\n  model &lt;- glm(notable_label ~ degree + pagerank + notoriety_recency,\n               data = features, family = binomial)\n\n  # Predict and return scored data frame\n  features$predicted_prob &lt;- predict(model, newdata = features, type = \"response\")\n  features %&gt;%\n    arrange(desc(predicted_prob)) %&gt;%\n    mutate(id = index) %&gt;%\n    select(id, label, genre, degree, pagerank,\n           notoriety_year, notoriety_recency,\n           predicted_prob, notable_label)\n}\n\n# Example: generate talent_score_df\ntalent_model_result &lt;- prepare_talent_score_from_graph(g_tbl)\ntalent_score_df      &lt;- talent_model_result\n\n\n\n\n\n\nThis section illustrates the main propose user interaction journey through the EchoScope‚Ñ¢ platform.\n\nFlow Structure:\n1. Home ‚Äì Introduction and orientation\n2. Influence Analysis ‚Äì Explore influence networks\n3. Genre Diffusion ‚Äì Track genre trends over time\n4. Talent Radar ‚Äì Compare and discover emerging talent\n5. Trend Dashboard ‚Äì Export macro-level insights\nüì∏ EchoScope‚Ñ¢ Dashboard Sidebar Navigation Screenshot\n\n\n\n\n\n\n\nWelcome users and introduce the EchoScope‚Ñ¢ platform.\n\n\n\nHomepage with a welcome message and orientation notes.\nüì∏ Screenshot of Home Page\n\n\n\nShow code\n\ntabItem(\n  tabName = \"home\",\n  fluidRow(\n    box(\n      width = 12, status = \"primary\", solidHeader = FALSE,\n      HTML('&lt;h1&gt;Welcome!&lt;/h1&gt;&lt;p&gt;EchoScope‚Ñ¢ is a web-based visual analytics prototype...&lt;/p&gt;')\n    )\n  )\n)\n\n\n\n\n\n\nSection Purpose: Understanding Sailor Shift‚Äôs Artistic Influence Network\nThis section presents a structured exploration of Sailor Shift‚Äôs artistic connections, using network analysis to examine three key perspectives:\n\nWho has Sailor Shift been influenced by?\n\nExplore direct and indirect artistic influences on Sailor Shift over time.\nWho has she collaborated with and influenced?\n\nIdentify collaborators and assess how her work has directly or indirectly shaped others.\nHer Influence on the Oceanus Folk Community\n\nFocus on how her influence has spread within the Oceanus Folk genre, including both direct and second-level indirect pathways.\n\nüì∏ Screenshot of Influence Graph Panel\n\n1ÔºöWe are going to use the tabset panel to focus on three key perspectives of influence analysisÔºõ\n2 : Each section provides an overview introduction to the influence network from a specific perspective, helping users better understand the background and objectives of this dashboard.\n\n\nThe main dashboard will show into four parts Interactive Filter Panel, Plot, Legend Panel, Interactive Data Table :\n\nInteractive Filter Panel :\n\nObjective : To empower users to efficiently explore and narrow down the influence network of Sailor Shift by providing intuitive and responsive filtering options.\nPlanned Filter Components & Intended Functionality\n\n\n\n\n\n\n\n\nFilter\nUser Interaction\nPlanned Purpose\n\n\n\n\nSelect Node Type\nMulti-select (e.g., Album, Person, Song, RecordLabel, etc.)\nFilters the network to show only selected entity types as nodes.\n\n\nSearch Node Name\nDropdown or typeahead search (e.g., ‚ÄúBrooke Olson‚Äù)\nFocuses the network graph on the selected node, zooming in automatically.\n\n\nSelect Edge Type\nMulti-select (e.g., ComposerOf, Interpolates, etc.)\nFilters edges by relationship type to limit visual noise and highlight key links.\n\n\nIs Notable?\nRadio buttons (All / TRUE / FALSE)\nFilters nodes by whether they are tagged as ‚Äúnotable‚Äù to emphasize known artists.\n\n\nSelect Genre(s)\nMulti-select (e.g., Alternative Rock, Avant-Garde Folk, etc.)\nEnables genre-based filtering to tailor the view to specific music categories.\n\n\nRelease Year Range\nRange slider (1983‚Äì2038) + ‚ÄúSelect All Years‚Äù button\nRestricts nodes by their associated release year, helping with temporal filtering.\n\n\nSelect Network Depth (from Sailor Shift)\nRange slider (1‚Äì3) + ‚ÄúSelect All network‚Äù button\nControls how many layers of influence (direct and indirect) are displayed.\n\n\n\nInteraction Design Considerations\n\nResponsiveness: Each filter is reactive and updates the network graph in real time.\nPerformance Notices: Informational messages are placed beneath heavier operations (e.g., select all years/network depth) to prepare the user for slight delays.\nEnhanced UX: All dropdowns use searchable pickerInputs with ‚Äúactions-box‚Äù for select/deselect all, streamlining multi-choice workflows.\n\n2.Planned Visualization Panel: Influence Plot & Summary Statistics and the related legends\nObjective\nTo dynamically visualize Sailor Shift‚Äôs influence network and provide quantitative summaries that respond in real-time to user-selected filters.And Influence plot, we plan to use the network plot to see the influence and for the Statistics, we will use the bar chart.\nNetwork Plot & Summary plan\n\n\n\n\n\n\n\n\nTab\nContent Type\nPlanned Interaction\n\n\nInfluence Network\nPlan to usevisNetwork graph\nDisplays a dynamic node-link network showing direct and indirect influence.\n\n\n\n\nHover reveals details; click highlights sub-network.\n\n\n\n\nResponds in real time to filters in the left panel (node type, genre, years, etc.).\n\n\nSummary Statistics\nPlan to use plotly interactive bar chart\nShows count of edges by relationship type (e.g., ComposerOf, PerformerOf, etc.).\n\n\n\n\nAggregated metrics update live as filters change.\n\n\n\nPropose outcome of the plots:\nFor the legends, we will also add some interactions into the summary bar chart to find more information for the audience and in order to make more clearly to understand the network, the legends will also show the node types and the edge types for references.\n3.Planned Table Panel: Influence Relationship Details\nObjective\nTo provide a tabular view of the filtered influence relationships, allowing users to explore details at a granular level, complementing the network graph.\nDesign & Features\nFunctionality plan:\n\nPaginated view with adjustable row count (5, 10, 25, 50, 100)\nSearch bar for keyword-based filtering (e.g., node name, genre)\nSortable columns for customized sorting (e.g., by release year or relationship type)\n\nDynamic Interaction\n\nTable will updates in real time based on all applied filters (e.g., node type, genre, year range).\nSupports detailed exploration and verification of insights observed in the visual graph and summary statistics.\nPlan to add downloadable CSV export or row click-to-expand options in the future.\n\nHere are the propose skeleton of the first part of the network influence UI design.\n\n\nUI Design + Server Planning Code\n\ntabItem(\n  tabName = \"influenced\"/\"Impact & Collaborated\"/\"Community influence\",\n  fluidRow(\n    column(4, wellPanel(\n      #Filter Design\n      pickerInput(\"node_type\", \"Select Node Type\", choices = ...),\n      pickerInput(\"edge_type\", \"Select Edge Type\", ...),\n      helpText(tagList(),...),\n      radioButtons(inputId = \"notable_filter\",...),\n      pickerInput(inputId = \"genre_filter\",label = \"Select Genre(s)\",...),\n      sliderInput(\"release_range\", \"Release Year Range\", ...),\n      actionButton(\"release_range_btn\", \"Select All Years\"),\n      sliderInput(\"network_depth\", \"Network Depth\", ...)\n    )),\n    column(8, visNetworkOutput(\"directGraph\", height = \"700px\",...))\n    column(DTOutput(\"directTable\", ...)\n    \n   )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  \n  #1 Dynamic Filtering of Edges and Nodes\n  \n  - filtered_edges()         # Filter edges based on network depth and edge type\n  - filtered_nodes()         # Filter nodes based on valid IDs and input criteria\n  - observe()                # Dynamically update node_name picker choices\n  \n  #2 Network Graph Rendering and Interaction\n  \n  - output$directGraph       # Render visNetwork main graph\n  - observeEvent(input$node_name)       # Focus and highlight on selected node\n  - observeEvent(input$notable_filter)  # Highlight nodes based on \"Notable\" filter\n  \n  #3 Quick Interaction Buttons\n  \n  - observeEvent(input$release_range_btn)     # Reset release year slider to full range\n  - observeEvent(input$network_depth_btn)     # Set network depth to maximum (e.g., 3)\n  \n  #4 Data Table Output Section (DT::datatable)\n  \n  - output$directTable       # Display filtered edge data with node names, types, genres, and dates\n  \n  #5 Summary Statistics Visualization Output\n  \n  - output$groupEdgeBarPlot  # Render grouped bar chart (Node Type √ó Edge Type) using ggplotly\n  - output$barInfo           # Display tooltip text on bar click (plotly_click event)\n\n}\n\n\n\n\n\nüéØ Module Purpose\nThis module explores how the genre Oceanus Folk has influenced the creation and spread of songs and albums over time. Using a dynamic network and Sankey diagram, we visualize genre diffusion pathways, including direct and indirect influence, along with their temporal evolution.\n\nüìù Use case: A music analyst or cultural researcher can trace how Oceanus Folk catalyzed the emergence of related genres, artists, and works across decades.\n\n\nüß≠ Interface Overview\nüì∏ Screenshot of Genre Diffusion Panel\n\n‚ë† Left Panel: Control Inputs\nThis panel allows users to refine the visualization by setting key filters:\n\nMain Genre Selector: Defaults to Oceanus Folk. Users can switch to explore other genres if applicable.\nYear Range Slider: Restricts the dataset by release year to focus on specific time windows.\nNode Type Selector: Filters the visualization to show only Song or Album nodes (ignores irrelevant types like Person).\nHop Depth (1-hop / 2-hop): Determines the depth of network exploration from the main genre (direct vs indirect influence).\n\nThese inputs dynamically control the center visualizations to support targeted analysis.\n‚ë° Center Panel Top: Timeline Trend Panel\nThis stacked area chart visualizes how different genres have been influenced by Oceanus Folk over time.\n\nX-axis: Year of release\n\nY-axis: Number of works influenced\n\nFill Color: Receiving genre\n\nInsights Provided:\n\nObserve stylistic waves: Is influence steady, or does it spike in certain periods?\nDetect genre surges: Which genres became more prominent over time due to Oceanus Folk?\nStudy response lag: How long after Oceanus Folk‚Äôs rise did other genres begin to echo it?\n\nThe year slider narrows the temporal scope for closer inspection.\n‚ë¢ Center Panel Middle: Genre Influence Network\nThis network graph visualizes works and genres influenced by Oceanus Folk.\n\nNodes: Songs or albums with genre tags\n\nEdges: Influence links (e.g., stylistic references, covers)\n\nGrouping: Nodes colored by genre\n\nHop Depth: 1-hop shows immediate connections; 2-hop expands to indirect pathways\n\nInsights Provided:\n\nSee structural spread: Starburst (centralized) vs Chain (progressive) diffusion\nDiscover genre bridges: Nodes that link distant styles\nAnalyze neighborhood scope: How far does Oceanus Folk‚Äôs influence travel?\n\nClicking a node reveals more info in the detail panel.\n‚ë£ Right Panel: Detail Panel\nThis section updates when a node is selected in the network or Sankey diagram.\nDetails shown: - Name of the node (song or album)\n- Representative Works (if available)\n- Active Year (release year)\n- Sailor Shift Connection: Whether the node has a collaboration or stylistic link with Sailor Shift\nPurpose:\n\nEnable deep-dives into specific works\nConnect micro-level detail with macro-level diffusion patterns\nSupport contextual storytelling around influential pieces or collaborators\n\n‚ë§ Center Panel Bottom: Genre Influence Backflow (Sankey Diagram)\nThis Sankey diagram shows reverse influence ‚Äî how other genres influenced Oceanus Folk.\n\nSource: External genres (e.g., Jazz, Psychedelic)\n\nTarget: Oceanus Folk\n\nLink Width: Frequency or weight of connections\n\nInsights Provided:\n\nUncover external roots: What genres shaped Oceanus Folk‚Äôs evolution?\nSpot dominant contributors: Are there a few strong influencers or many subtle ones?\nExplore bidirectional influence: Music genres are not static ‚Äî Oceanus Folk both influences and is influenced.\n\nThis module highlights how cultural exchange reshapes a genre over time.\n‚ë§ Right Panel: Detail Panel\nThis section updates when a node is selected in the network or Sankey diagram.\nDetails shown: - Name of the node (song or album)\n- Representative Works (if available)\n- Active Year (release year)\n- Sailor Shift Connection: Whether the node has a collaboration or stylistic link with Sailor Shift\nPurpose:\n\nEnable deep-dives into specific works\nConnect micro-level detail with macro-level diffusion patterns\nSupport contextual storytelling around influential pieces or collaborators\n\n\n\nUI Design + Server Planning Code\n\n    tabItem(tabName = \"genre\",\n            fluidRow(\n              \n              column(width = 3,\n                     box(title = \"Control Panel\", status = \"info\", solidHeader = TRUE, width = 13,\n                         selectInput(\"mainGenre\", \"Main Genre\",\n                                     choices = sort(unique(na.omit(all_nodes$genre))),\n                                     selected = \"Oceanus Folk\"\n                         ),\n                         sliderInput(\"yearRange\", \"Year Range:\",\n                                     min = 1983, max = 2038, value = c(1990, 2025), sep = \"\"\n                         ),\n                         selectInput(\"nodeType\", \"Node Type:\",\n                                     choices = c(\"Song (Track)\" = \"Song\", \"Album\" = \"Album\"),\n                                     selected = \"Song\"\n                         ),\n                         radioButtons(\"hopDepth\", \"Influence Path Depth:\",\n                                      choices = c(\"1-hop\" = 1, \"2-hop\" = 2), selected = 1\n                         )\n                     )\n              ),\n              \n              column(width = 9,\n                     fluidRow(\n                       column(width = 8,\n                              box(title = \"Timeline Trend\", status = \"primary\", solidHeader = TRUE, width = 14,\n                                  plotlyOutput(\"trendPlot\", height = \"200px\")\n                              ),\n                              box(title = \"Genre Influence Network\", status = \"primary\", solidHeader = TRUE, width = 14,\n                                  visNetworkOutput(\"genreNetwork\", height = \"250px\")\n                              ),\n                              box(title = \"Genre Influence Backflow\", status = \"primary\", solidHeader = TRUE, width = 14,\n                                  sankeyNetworkOutput(\"genreSankey\", height = \"250px\")\n                              )\n                       ),\n                       column(width = 4,\n                              box(title = \"Detail Panel\", status = \"primary\", solidHeader = TRUE, width = 12,\n                                  uiOutput(\"detailPanel\")\n                              )\n                       )\n                     )\n              )\n            )\n    )\n    \n#### Sever Part ######\ngraph_data &lt;- fromJSON(\"data/MC1_graph.json\")\n    nodes_df &lt;- as.data.frame(graph_data$nodes)\n    edges_df &lt;- as.data.frame(graph_data$links)\n    \n    all_nodes &lt;- nodes_df\n    \n    # Reactive filtering: filter nodes and edges based on user input\n    filtered &lt;- reactive({\n      \n      nodes &lt;- all_nodes \n      edges &lt;- edges_df\n      \n      # Only keep nodes that are Song or Album and have genre\n      nodes &lt;- nodes %&gt;%\n        filter(`Node Type` %in% c(\"Song\", \"Album\"), !is.na(genre))\n      \n      # Filter by year (assumes release_date is year string)\n      yr &lt;- input$yearRange\n      if (!is.null(yr)) {\n        nodes &lt;- nodes %&gt;%\n          filter(!is.na(release_date) & as.numeric(release_date) &gt;= yr[1] & \n                   as.numeric(release_date) &lt;= yr[2])\n      }\n      \n      # Filter by node type\n      if (!is.null(input$nodeType) && input$nodeType != \"\") {\n        nodes &lt;- nodes %&gt;% filter(`Node Type` == input$nodeType)\n      }\n      \n      # Join genre info\n      edges &lt;- edges %&gt;%\n        left_join(nodes %&gt;% select(id, genre), by = c(\"source\" = \"id\")) %&gt;%\n        rename(source_genre = genre) %&gt;%\n        left_join(nodes %&gt;% select(id, genre), by = c(\"target\" = \"id\")) %&gt;%\n        rename(target_genre = genre)\n      \n      list(nodes = nodes, edges = edges)\n    })\n    \n    observe({\n      updateSelectInput(session, \"mainGenre\",\n                        choices = sort(unique(na.omit(nodes_df$genre))),\n                        selected = \"Oceanus Folk\")\n    })\n    \n    # Timeline trend plot: count genre nodes influenced by Oceanus Folk per year\n    output$trendPlot &lt;- renderPlotly({\n      data &lt;- filtered()$nodes\n      if (nrow(data) == 0) return(NULL)\n      # Extract year and count number of nodes per genre per year\n      df &lt;- data %&gt;% \n        filter(!is.na(release_date)) %&gt;%\n        mutate(Year = as.numeric(release_date)) %&gt;%\n        group_by(Year, genre) %&gt;%\n        summarize(Count = n(), .groups = 'drop')\n      if (nrow(df) == 0) return(NULL)\n      # Plot stacked area chart\n      p &lt;- ggplot(df, aes(x = Year, y = Count, fill = genre)) +\n        geom_area(alpha = 0.6) +\n        labs(x = \"Year\", y = \"Affected Count\", fill = \"Genre\") +\n        theme_minimal()\n      ggplotly(p)\n    })\n    \n    # Genre influence network: centered on Oceanus Folk showing influence connections\n    output$genreNetwork &lt;- renderVisNetwork({\n      data &lt;- filtered()\n      nodes &lt;- data$nodes\n      edges &lt;- data$edges\n      if (nrow(nodes) == 0 || nrow(edges) == 0) return(NULL)\n      \n      main_genre &lt;- input$mainGenre\n      \n      # Áî® all_nodes Ëé∑Âèñ‰∏ª genre ËäÇÁÇπ ID\n      main_ids &lt;- all_nodes %&gt;% filter(genre == main_genre) %&gt;% pull(id)\n      if (length(main_ids) == 0) return(NULL)\n      \n      if (input$hopDepth == 1) {\n        edges_sub &lt;- edges %&gt;% filter(source %in% main_ids | target %in% main_ids)\n        nodes_sub &lt;- nodes %&gt;% filter(id %in% unique(c(edges_sub$source, edges_sub$target)))\n      } else {\n        one_hop &lt;- edges %&gt;% filter(source %in% main_ids | target %in% main_ids) %&gt;%\n          pull(source, target) %&gt;% unlist() %&gt;% unique()\n        edges_sub &lt;- edges %&gt;% filter(source %in% c(main_ids, one_hop) | target %in% c(main_ids, one_hop))\n        nodes_sub &lt;- nodes %&gt;% filter(id %in% unique(c(edges_sub$source, edges_sub$target)))\n      }\n      \n      vis_nodes &lt;- data.frame(id = nodes_sub$id, label = nodes_sub$name,\n                              value = 10, group = nodes_sub$genre)\n      vis_edges &lt;- data.frame(from = edges_sub$source, to = edges_sub$target, arrows = \"to\")\n      \n      visNetwork(vis_nodes, vis_edges) %&gt;%\n        visOptions(highlightNearest = list(enabled = TRUE, degree = 1),\n                   nodesIdSelection = TRUE)\n    })\n    \n    # Sankey diagram: backflow influence from other genres to Oceanus Folk\n    output$genreSankey &lt;- renderSankeyNetwork({\n      data &lt;- filtered()$edges\n      nodes &lt;- filtered()$nodes\n      if (nrow(data) == 0 || nrow(nodes) == 0) return(NULL)\n      \n      main_genre &lt;- input$mainGenre\n      \n      # Filter for edges where only one side is Oceanus Folk\n      sankey_links &lt;- data %&gt;%\n        filter(\n          !is.na(source_genre) & !is.na(target_genre),\n          (target_genre != main_genre & source_genre == main_genre) |\n            (source_genre != main_genre & target_genre == main_genre)\n        ) %&gt;%\n        mutate(\n          FromGenre = ifelse(target_genre == main_genre, source_genre, target_genre),\n          ToGenre = main_genre\n        ) %&gt;%\n        group_by(FromGenre, ToGenre) %&gt;%\n        summarize(Value = n(), .groups = 'drop')\n    \n      \n      if (nrow(sankey_links) == 0) return(NULL)\n      \n      # Create nodes and links\n      sankey_nodes &lt;- data.frame(name = unique(c(sankey_links$FromGenre, sankey_links$ToGenre)))\n      sankey_links &lt;- sankey_links %&gt;%\n        mutate(\n          source = match(FromGenre, sankey_nodes$name) - 1,\n          target = match(ToGenre, sankey_nodes$name) - 1\n        )\n      \n      sankeyNetwork(\n        Links = sankey_links,\n        Nodes = sankey_nodes,\n        Source = \"source\",\n        Target = \"target\",\n        Value = \"Value\",\n        NodeID = \"name\",\n        fontSize = 12,\n        nodeWidth = 30\n      )\n      \n    })\n    \n    # Detail panel: show node details upon selection\n    output$detailPanel &lt;- renderUI({\n      # Assume visNetwork selection triggers input$genreNetwork_selected\n      sel_id &lt;- input$genreNetwork_selected\n      if (is.null(sel_id)) {\n        return(tags$p(\"Click a node in the network or Sankey diagram to view details.\"))\n      }\n      # Look up selected node information\n      node_row &lt;- nodes_df %&gt;% filter(id == sel_id)\n      if (nrow(node_row) == 0) return(NULL)\n      # Sample field extraction (adjust to your schema)\n      name    &lt;- node_row$name\n      works   &lt;- ifelse(!is.null(node_row$representative_works), node_row$representative_works, \"N/A\")\n      activeY &lt;- ifelse(!is.null(node_row$release_date), node_row$release_date, \"Unknown\")\n      # Check whether there is collaboration or similarity with Sailor Shift\n      sshift_id &lt;- nodes_df$id[nodes_df$name == \"Sailor Shift\"]\n      related &lt;- any(edges_df$Edge.Type %in% c(\"MemberOf\", \"InStyleOf\", \"LyricistOf\", \"LyricalReferenceTo\") &\n                       ((edges_df$source == sel_id & edges_df$target == sshift_id) |\n                          (edges_df$source == sshift_id & edges_df$target == sel_id)))\n      tagList(\n        h4(paste0(\"Name: \", name)),\n        p(paste0(\"Representative Works: \", works)),\n        p(paste0(\"Active Year: \", activeY)),\n        p(paste0(\"Collaboration / Style Similarity with Sailor Shift: \", ifelse(related, \"Yes\", \"No\")))\n      )\n    })\n\n\n\n\n\nPurpose\nCompare emerging artists based on graph features and scoring metrics to identify rising talent in a specific genre.\nKey Features üéØ Filter by Genre Users can focus on a specific musical style to narrow the artist pool.\n\nüéõ Customizable Score Weights Sliders allow users to adjust the importance of PageRank, Degree Centrality, Style Similarity, and Notable Works ‚Äî helping tailor the talent score to different discovery goals.\nüìä Radar Comparison Chart Visually compare up to 5 artists across the 4 scoring dimensions using an interactive radar plot.\nüìã Scoreboard Table A sortable, downloadable table summarizing talent scores and ranking details.\nüì• Export Results Allows users to download the scoring results as a CSV for further analysis or reporting.\n\nüì∏ Talent Radar Panel\nTalent Radar ‚Äì Score Explorer\nThe Score Explorer tab in the Talent Radar module is organized into two main sections:\n\nArtist Selection Controls (Left Pane)\n\nFilter by Genre\nChoose one or more music genres to limit which artists are considered.\nSelect Artists to Compare\nA searchable, multi-select dropdown that lists all artists active in the selected genre(s); up to five can be chosen for direct comparison.\n\nCustomize Score Weights (Left Pane)\n\nPageRank\n&gt; Indicates an artist‚Äôs global influence within the full network.\nDegree Centrality\n&gt; Counts the number of direct connections an artist has (collaborations, samples, covers, etc.).\nStyle Similarity\n&gt; Reflects how frequently an artist contributes to works in the selected genre(s).\nNotable Works Count\n&gt; The normalized count of an artist‚Äôs works flagged as ‚Äúnotable‚Äù in the dataset.\n\nVisualization Output (Right Pane)\n\nRadar Comparison (default)\nPlots each selected artist on a four-axis radar chart (PageRank, Degree, StyleSim, NotableCount), scaled 0‚Äì1, making it easy to see which artist leads on which metric.\nScoreboard\nA sortable, searchable table of the raw normalized scores and overall weighted score for each selected artist.\n\n\nThis layout enables interactive ‚Äúwhat-if‚Äù analysis: dragging the weight sliders immediately updates the radar and table, so stakeholders can experiment with different business priorities (e.g., favoring global influence vs.¬†genre specialization) to surface the most promising emerging talent.\n\nTalent Radar ‚Äì Scoreboard\nThe Scoreboard tab complements the Radar Comparison by showing the underlying normalized metrics and overall weighted scores in a familiar table format. Key features:\n\nEntries Selector\nControl the number of rows shown per page (10, 25, 50, 100) for quick paging through results.\nSearch Box\nFilter artists in real time by name or any score field.\nSortable Columns\nClick any column header (PageRank, Degree, StyleSim, NotableCountNorm, Score) to sort ascending/descending.\nDownload CSV\nExport the complete weighted scores dataset for offline analysis or reporting.\n\n\n\n\nUI Design + Server Planning Code\n\n\ntabItem(\n  tabName = \"talent\",\n  fluidRow(\n    column(4,\n      pickerInput(\"talent_genre\", \"Filter by Genre\", ...),\n      uiOutput(\"select_compare_artists\"),\n      sliderInput(\"weight_pagerank\", \"PageRank\", 0, 1, 0.3),\n      sliderInput(\"weight_degree\", \"Degree Centrality\", 0, 1, 0.2),\n      sliderInput(\"weight_similarity\", \"Style Similarity\", 0, 1, 0.3),\n      sliderInput(\"weight_notable_count\", \"Notable Works Count\", 0, 1, 0.2),\n      downloadButton(\"download_weighted_scores\", \"Download CSV\")\n    ),\n    column(8,\n      tabsetPanel(\n        tabPanel(\"Radar Comparison\", plotlyOutput(\"talent_radar_plot\")),\n        tabPanel(\"Scoreboard\", DTOutput(\"talent_score_table\"))\n      )\n    )\n  )\n)\n\n\n\n\n\nPurpose Enable high-level insights export and macro filtering across all trends.\n\nKey Features Select multiple genres\nChoose analysis layers (e.g., cumulative, normalized)\nExport raw data as CSV\n\nüì∏ Screenshot of Trend Dashboard Panel\n\n\nUI Design + Server Planning Code\n\ntabItem(\n  tabName = \"trend\",\n  fluidRow(\n    column(4,\n      pickerInput(\"trend_genre\", \"Select Genre(s)\", ...),\n      checkboxGroupInput(\"trend_layers\", \"Show Layers\", choices = ...),\n      downloadButton(\"download_trend_data\", \"Export Trend Data\")\n    ),\n    column(8, plotlyOutput(\"trend_area_plot\"))\n  )\n)"
  },
  {
    "objectID": "Storyboard.html#setup-data-preparation",
    "href": "Storyboard.html#setup-data-preparation",
    "title": "EchoScope‚Ñ¢ Prototype Storyboard",
    "section": "",
    "text": "Before diving into the individual UI panels, here‚Äôs a quick summary of the R packages we load and the core data-preprocessing steps used throughout EchoScope‚Ñ¢. Click Show to expand.\n\n\n\nShow libraries & data-prep code\n\n# ‚Äî‚Äî‚Äî R Packages ‚Äî‚Äî‚Äî\n\n# ‚Äî‚Äî‚Äî Shiny & UI ‚Äî‚Äî‚Äî\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(shinyWidgets)\n\n# ‚Äî‚Äî‚Äî Data wrangling ‚Äî‚Äî‚Äî\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(jsonlite)\nlibrary(lubridate)\nlibrary(scales)\n\n# ‚Äî‚Äî‚Äî Tables & plotting ‚Äî‚Äî‚Äî\nlibrary(DT)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# ‚Äî‚Äî‚Äî Network analysis ‚Äî‚Äî‚Äî\nlibrary(visNetwork)\nlibrary(tidygraph)\nlibrary(igraph)\n\n# ‚Äî‚Äî‚Äî Influence Graph Data Prep ‚Äî‚Äî‚Äî\n\n# 1) Load graph JSON\nkg        &lt;- fromJSON(\"data/MC1_graph.json\")\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)\n\n# 2) Build index map\nid_map &lt;- tibble(\n  id    = nodes_tbl$id,\n  index = seq_len(nrow(nodes_tbl))\n)\n\n# 3) Translate source/target ‚Üí from/to\nedges_tbl_graph &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;% rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;% rename(to   = index) %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n# 4) Create tidygraph object\ng_tbl &lt;- tbl_graph(\n  nodes    = nodes_tbl %&gt;% rename(node_name = name) %&gt;% mutate(index = row_number()),\n  edges    = edges_tbl_graph,\n  directed = TRUE\n)\n\n# 5) Subnetwork extraction helper\nextract_subnetwork &lt;- function(graph, node_name,\n                               distance = NULL,\n                               direction = c(\"all\",\"in\",\"out\"),\n                               edge_types = NULL,\n                               node_types = NULL) {\n  direction &lt;- match.arg(direction)\n  v_idx     &lt;- which(V(graph)$name == node_name)\n  vids      &lt;- ego(graph, v_idx, order = distance %||% length(graph),\n                   mode = direction)[[1]]\n  sg        &lt;- induced_subgraph(graph, vids)\n  nd        &lt;- as_data_frame(sg, what = \"vertices\")\n  ed        &lt;- as_data_frame(sg, what = \"edges\")\n  if (!is.null(edge_types)) ed &lt;- ed[ed$`Edge Type` %in% edge_types, ]\n  if (!is.null(node_types)) nd &lt;- nd[nd$`Node Type` %in% node_types, ]\n  tidygraph::tbl_graph(nodes = nd, edges = ed, directed = is_directed(graph))\n}\n\n# 6) Talent scoring function\nprepare_talent_score_from_graph &lt;- function(g_tbl) {\n  nodes &lt;- as_tibble(g_tbl, active = \"nodes\")\n  edges &lt;- as_tibble(g_tbl, active = \"edges\")\n\n  # Identify notable works\n  notable_work_ids &lt;- nodes %&gt;%\n    filter(`Node Type` %in% c(\"Song\",\"Album\"), notable == TRUE) %&gt;%\n    pull(index)\n\n  # Identify contributing persons\n  person_edge_types &lt;- c(\"PerformerOf\",\"ComposerOf\",\"ProducerOf\",\"LyricistOf\")\n  contributing_persons &lt;- edges %&gt;%\n    filter(to %in% notable_work_ids, `Edge Type` %in% person_edge_types) %&gt;%\n    pull(from) %&gt;% unique()\n\n  # Prepare person dataframe with recency & label\n  person_df &lt;- nodes %&gt;%\n    filter(`Node Type` == \"Person\") %&gt;%\n    select(index, label = node_name, notoriety_date, genre) %&gt;%\n    mutate(\n      notoriety_year   = as.numeric(substr(notoriety_date,1,4)),\n      notoriety_recency = pmax(0, 1 - (2025 - notoriety_year) / 20),\n      notable_label     = as.integer(index %in% contributing_persons)\n    )\n\n  # Add graph features\n  graph_feat &lt;- g_tbl %&gt;%\n    activate(nodes) %&gt;%\n    mutate(degree = centrality_degree(), pagerank = centrality_pagerank())\n  feat &lt;- as_tibble(graph_feat, active = \"nodes\") %&gt;%\n    filter(`Node Type` == \"Person\") %&gt;%\n    select(index, degree, pagerank)\n\n  # Merge features\n  features &lt;- person_df %&gt;%\n    left_join(feat, by = \"index\") %&gt;%\n    mutate(across(c(degree,pagerank,notoriety_recency), ~replace_na(.,0)))\n\n  # Train logistic regression\n  if (nrow(features) &lt; 10 || length(unique(features$notable_label)) &lt; 2)\n    stop(\"Insufficient training data or no positive/negative samples.\")\n  model &lt;- glm(notable_label ~ degree + pagerank + notoriety_recency,\n               data = features, family = binomial)\n\n  # Predict and return scored data frame\n  features$predicted_prob &lt;- predict(model, newdata = features, type = \"response\")\n  features %&gt;%\n    arrange(desc(predicted_prob)) %&gt;%\n    mutate(id = index) %&gt;%\n    select(id, label, genre, degree, pagerank,\n           notoriety_year, notoriety_recency,\n           predicted_prob, notable_label)\n}\n\n# Example: generate talent_score_df\ntalent_model_result &lt;- prepare_talent_score_from_graph(g_tbl)\ntalent_score_df      &lt;- talent_model_result"
  },
  {
    "objectID": "Storyboard.html#user-flow-overview",
    "href": "Storyboard.html#user-flow-overview",
    "title": "EchoScope‚Ñ¢ Prototype Storyboard",
    "section": "",
    "text": "This section illustrates the main propose user interaction journey through the EchoScope‚Ñ¢ platform.\n\nFlow Structure:\n1. Home ‚Äì Introduction and orientation\n2. Influence Analysis ‚Äì Explore influence networks\n3. Genre Diffusion ‚Äì Track genre trends over time\n4. Talent Radar ‚Äì Compare and discover emerging talent\n5. Trend Dashboard ‚Äì Export macro-level insights\nüì∏ EchoScope‚Ñ¢ Dashboard Sidebar Navigation Screenshot"
  },
  {
    "objectID": "Storyboard.html#home-panel",
    "href": "Storyboard.html#home-panel",
    "title": "EchoScope‚Ñ¢ Prototype Storyboard",
    "section": "",
    "text": "Welcome users and introduce the EchoScope‚Ñ¢ platform.\n\n\n\nHomepage with a welcome message and orientation notes.\nüì∏ Screenshot of Home Page\n\n\n\nShow code\n\ntabItem(\n  tabName = \"home\",\n  fluidRow(\n    box(\n      width = 12, status = \"primary\", solidHeader = FALSE,\n      HTML('&lt;h1&gt;Welcome!&lt;/h1&gt;&lt;p&gt;EchoScope‚Ñ¢ is a web-based visual analytics prototype...&lt;/p&gt;')\n    )\n  )\n)"
  },
  {
    "objectID": "Storyboard.html#influence-analysis-panel",
    "href": "Storyboard.html#influence-analysis-panel",
    "title": "EchoScope‚Ñ¢ Prototype Storyboard",
    "section": "",
    "text": "Section Purpose: Understanding Sailor Shift‚Äôs Artistic Influence Network\nThis section presents a structured exploration of Sailor Shift‚Äôs artistic connections, using network analysis to examine three key perspectives:\n\nWho has Sailor Shift been influenced by?\n\nExplore direct and indirect artistic influences on Sailor Shift over time.\nWho has she collaborated with and influenced?\n\nIdentify collaborators and assess how her work has directly or indirectly shaped others.\nHer Influence on the Oceanus Folk Community\n\nFocus on how her influence has spread within the Oceanus Folk genre, including both direct and second-level indirect pathways.\n\nüì∏ Screenshot of Influence Graph Panel\n\n1ÔºöWe are going to use the tabset panel to focus on three key perspectives of influence analysisÔºõ\n2 : Each section provides an overview introduction to the influence network from a specific perspective, helping users better understand the background and objectives of this dashboard.\n\n\nThe main dashboard will show into four parts Interactive Filter Panel, Plot, Legend Panel, Interactive Data Table :\n\nInteractive Filter Panel :\n\nObjective : To empower users to efficiently explore and narrow down the influence network of Sailor Shift by providing intuitive and responsive filtering options.\nPlanned Filter Components & Intended Functionality\n\n\n\n\n\n\n\n\nFilter\nUser Interaction\nPlanned Purpose\n\n\n\n\nSelect Node Type\nMulti-select (e.g., Album, Person, Song, RecordLabel, etc.)\nFilters the network to show only selected entity types as nodes.\n\n\nSearch Node Name\nDropdown or typeahead search (e.g., ‚ÄúBrooke Olson‚Äù)\nFocuses the network graph on the selected node, zooming in automatically.\n\n\nSelect Edge Type\nMulti-select (e.g., ComposerOf, Interpolates, etc.)\nFilters edges by relationship type to limit visual noise and highlight key links.\n\n\nIs Notable?\nRadio buttons (All / TRUE / FALSE)\nFilters nodes by whether they are tagged as ‚Äúnotable‚Äù to emphasize known artists.\n\n\nSelect Genre(s)\nMulti-select (e.g., Alternative Rock, Avant-Garde Folk, etc.)\nEnables genre-based filtering to tailor the view to specific music categories.\n\n\nRelease Year Range\nRange slider (1983‚Äì2038) + ‚ÄúSelect All Years‚Äù button\nRestricts nodes by their associated release year, helping with temporal filtering.\n\n\nSelect Network Depth (from Sailor Shift)\nRange slider (1‚Äì3) + ‚ÄúSelect All network‚Äù button\nControls how many layers of influence (direct and indirect) are displayed.\n\n\n\nInteraction Design Considerations\n\nResponsiveness: Each filter is reactive and updates the network graph in real time.\nPerformance Notices: Informational messages are placed beneath heavier operations (e.g., select all years/network depth) to prepare the user for slight delays.\nEnhanced UX: All dropdowns use searchable pickerInputs with ‚Äúactions-box‚Äù for select/deselect all, streamlining multi-choice workflows.\n\n2.Planned Visualization Panel: Influence Plot & Summary Statistics and the related legends\nObjective\nTo dynamically visualize Sailor Shift‚Äôs influence network and provide quantitative summaries that respond in real-time to user-selected filters.And Influence plot, we plan to use the network plot to see the influence and for the Statistics, we will use the bar chart.\nNetwork Plot & Summary plan\n\n\n\n\n\n\n\n\nTab\nContent Type\nPlanned Interaction\n\n\nInfluence Network\nPlan to usevisNetwork graph\nDisplays a dynamic node-link network showing direct and indirect influence.\n\n\n\n\nHover reveals details; click highlights sub-network.\n\n\n\n\nResponds in real time to filters in the left panel (node type, genre, years, etc.).\n\n\nSummary Statistics\nPlan to use plotly interactive bar chart\nShows count of edges by relationship type (e.g., ComposerOf, PerformerOf, etc.).\n\n\n\n\nAggregated metrics update live as filters change.\n\n\n\nPropose outcome of the plots:\nFor the legends, we will also add some interactions into the summary bar chart to find more information for the audience and in order to make more clearly to understand the network, the legends will also show the node types and the edge types for references.\n3.Planned Table Panel: Influence Relationship Details\nObjective\nTo provide a tabular view of the filtered influence relationships, allowing users to explore details at a granular level, complementing the network graph.\nDesign & Features\nFunctionality plan:\n\nPaginated view with adjustable row count (5, 10, 25, 50, 100)\nSearch bar for keyword-based filtering (e.g., node name, genre)\nSortable columns for customized sorting (e.g., by release year or relationship type)\n\nDynamic Interaction\n\nTable will updates in real time based on all applied filters (e.g., node type, genre, year range).\nSupports detailed exploration and verification of insights observed in the visual graph and summary statistics.\nPlan to add downloadable CSV export or row click-to-expand options in the future.\n\nHere are the propose skeleton of the first part of the network influence UI design.\n\n\nUI Design + Server Planning Code\n\ntabItem(\n  tabName = \"influenced\"/\"Impact & Collaborated\"/\"Community influence\",\n  fluidRow(\n    column(4, wellPanel(\n      #Filter Design\n      pickerInput(\"node_type\", \"Select Node Type\", choices = ...),\n      pickerInput(\"edge_type\", \"Select Edge Type\", ...),\n      helpText(tagList(),...),\n      radioButtons(inputId = \"notable_filter\",...),\n      pickerInput(inputId = \"genre_filter\",label = \"Select Genre(s)\",...),\n      sliderInput(\"release_range\", \"Release Year Range\", ...),\n      actionButton(\"release_range_btn\", \"Select All Years\"),\n      sliderInput(\"network_depth\", \"Network Depth\", ...)\n    )),\n    column(8, visNetworkOutput(\"directGraph\", height = \"700px\",...))\n    column(DTOutput(\"directTable\", ...)\n    \n   )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  \n  #1 Dynamic Filtering of Edges and Nodes\n  \n  - filtered_edges()         # Filter edges based on network depth and edge type\n  - filtered_nodes()         # Filter nodes based on valid IDs and input criteria\n  - observe()                # Dynamically update node_name picker choices\n  \n  #2 Network Graph Rendering and Interaction\n  \n  - output$directGraph       # Render visNetwork main graph\n  - observeEvent(input$node_name)       # Focus and highlight on selected node\n  - observeEvent(input$notable_filter)  # Highlight nodes based on \"Notable\" filter\n  \n  #3 Quick Interaction Buttons\n  \n  - observeEvent(input$release_range_btn)     # Reset release year slider to full range\n  - observeEvent(input$network_depth_btn)     # Set network depth to maximum (e.g., 3)\n  \n  #4 Data Table Output Section (DT::datatable)\n  \n  - output$directTable       # Display filtered edge data with node names, types, genres, and dates\n  \n  #5 Summary Statistics Visualization Output\n  \n  - output$groupEdgeBarPlot  # Render grouped bar chart (Node Type √ó Edge Type) using ggplotly\n  - output$barInfo           # Display tooltip text on bar click (plotly_click event)\n\n}"
  },
  {
    "objectID": "Storyboard.html#genre-diffusion-panel",
    "href": "Storyboard.html#genre-diffusion-panel",
    "title": "EchoScope‚Ñ¢ Prototype Storyboard",
    "section": "",
    "text": "üéØ Module Purpose\nThis module explores how the genre Oceanus Folk has influenced the creation and spread of songs and albums over time. Using a dynamic network and Sankey diagram, we visualize genre diffusion pathways, including direct and indirect influence, along with their temporal evolution.\n\nüìù Use case: A music analyst or cultural researcher can trace how Oceanus Folk catalyzed the emergence of related genres, artists, and works across decades.\n\n\nüß≠ Interface Overview\nüì∏ Screenshot of Genre Diffusion Panel\n\n‚ë† Left Panel: Control Inputs\nThis panel allows users to refine the visualization by setting key filters:\n\nMain Genre Selector: Defaults to Oceanus Folk. Users can switch to explore other genres if applicable.\nYear Range Slider: Restricts the dataset by release year to focus on specific time windows.\nNode Type Selector: Filters the visualization to show only Song or Album nodes (ignores irrelevant types like Person).\nHop Depth (1-hop / 2-hop): Determines the depth of network exploration from the main genre (direct vs indirect influence).\n\nThese inputs dynamically control the center visualizations to support targeted analysis.\n‚ë° Center Panel Top: Timeline Trend Panel\nThis stacked area chart visualizes how different genres have been influenced by Oceanus Folk over time.\n\nX-axis: Year of release\n\nY-axis: Number of works influenced\n\nFill Color: Receiving genre\n\nInsights Provided:\n\nObserve stylistic waves: Is influence steady, or does it spike in certain periods?\nDetect genre surges: Which genres became more prominent over time due to Oceanus Folk?\nStudy response lag: How long after Oceanus Folk‚Äôs rise did other genres begin to echo it?\n\nThe year slider narrows the temporal scope for closer inspection.\n‚ë¢ Center Panel Middle: Genre Influence Network\nThis network graph visualizes works and genres influenced by Oceanus Folk.\n\nNodes: Songs or albums with genre tags\n\nEdges: Influence links (e.g., stylistic references, covers)\n\nGrouping: Nodes colored by genre\n\nHop Depth: 1-hop shows immediate connections; 2-hop expands to indirect pathways\n\nInsights Provided:\n\nSee structural spread: Starburst (centralized) vs Chain (progressive) diffusion\nDiscover genre bridges: Nodes that link distant styles\nAnalyze neighborhood scope: How far does Oceanus Folk‚Äôs influence travel?\n\nClicking a node reveals more info in the detail panel.\n‚ë£ Right Panel: Detail Panel\nThis section updates when a node is selected in the network or Sankey diagram.\nDetails shown: - Name of the node (song or album)\n- Representative Works (if available)\n- Active Year (release year)\n- Sailor Shift Connection: Whether the node has a collaboration or stylistic link with Sailor Shift\nPurpose:\n\nEnable deep-dives into specific works\nConnect micro-level detail with macro-level diffusion patterns\nSupport contextual storytelling around influential pieces or collaborators\n\n‚ë§ Center Panel Bottom: Genre Influence Backflow (Sankey Diagram)\nThis Sankey diagram shows reverse influence ‚Äî how other genres influenced Oceanus Folk.\n\nSource: External genres (e.g., Jazz, Psychedelic)\n\nTarget: Oceanus Folk\n\nLink Width: Frequency or weight of connections\n\nInsights Provided:\n\nUncover external roots: What genres shaped Oceanus Folk‚Äôs evolution?\nSpot dominant contributors: Are there a few strong influencers or many subtle ones?\nExplore bidirectional influence: Music genres are not static ‚Äî Oceanus Folk both influences and is influenced.\n\nThis module highlights how cultural exchange reshapes a genre over time.\n‚ë§ Right Panel: Detail Panel\nThis section updates when a node is selected in the network or Sankey diagram.\nDetails shown: - Name of the node (song or album)\n- Representative Works (if available)\n- Active Year (release year)\n- Sailor Shift Connection: Whether the node has a collaboration or stylistic link with Sailor Shift\nPurpose:\n\nEnable deep-dives into specific works\nConnect micro-level detail with macro-level diffusion patterns\nSupport contextual storytelling around influential pieces or collaborators\n\n\n\nUI Design + Server Planning Code\n\n    tabItem(tabName = \"genre\",\n            fluidRow(\n              \n              column(width = 3,\n                     box(title = \"Control Panel\", status = \"info\", solidHeader = TRUE, width = 13,\n                         selectInput(\"mainGenre\", \"Main Genre\",\n                                     choices = sort(unique(na.omit(all_nodes$genre))),\n                                     selected = \"Oceanus Folk\"\n                         ),\n                         sliderInput(\"yearRange\", \"Year Range:\",\n                                     min = 1983, max = 2038, value = c(1990, 2025), sep = \"\"\n                         ),\n                         selectInput(\"nodeType\", \"Node Type:\",\n                                     choices = c(\"Song (Track)\" = \"Song\", \"Album\" = \"Album\"),\n                                     selected = \"Song\"\n                         ),\n                         radioButtons(\"hopDepth\", \"Influence Path Depth:\",\n                                      choices = c(\"1-hop\" = 1, \"2-hop\" = 2), selected = 1\n                         )\n                     )\n              ),\n              \n              column(width = 9,\n                     fluidRow(\n                       column(width = 8,\n                              box(title = \"Timeline Trend\", status = \"primary\", solidHeader = TRUE, width = 14,\n                                  plotlyOutput(\"trendPlot\", height = \"200px\")\n                              ),\n                              box(title = \"Genre Influence Network\", status = \"primary\", solidHeader = TRUE, width = 14,\n                                  visNetworkOutput(\"genreNetwork\", height = \"250px\")\n                              ),\n                              box(title = \"Genre Influence Backflow\", status = \"primary\", solidHeader = TRUE, width = 14,\n                                  sankeyNetworkOutput(\"genreSankey\", height = \"250px\")\n                              )\n                       ),\n                       column(width = 4,\n                              box(title = \"Detail Panel\", status = \"primary\", solidHeader = TRUE, width = 12,\n                                  uiOutput(\"detailPanel\")\n                              )\n                       )\n                     )\n              )\n            )\n    )\n    \n#### Sever Part ######\ngraph_data &lt;- fromJSON(\"data/MC1_graph.json\")\n    nodes_df &lt;- as.data.frame(graph_data$nodes)\n    edges_df &lt;- as.data.frame(graph_data$links)\n    \n    all_nodes &lt;- nodes_df\n    \n    # Reactive filtering: filter nodes and edges based on user input\n    filtered &lt;- reactive({\n      \n      nodes &lt;- all_nodes \n      edges &lt;- edges_df\n      \n      # Only keep nodes that are Song or Album and have genre\n      nodes &lt;- nodes %&gt;%\n        filter(`Node Type` %in% c(\"Song\", \"Album\"), !is.na(genre))\n      \n      # Filter by year (assumes release_date is year string)\n      yr &lt;- input$yearRange\n      if (!is.null(yr)) {\n        nodes &lt;- nodes %&gt;%\n          filter(!is.na(release_date) & as.numeric(release_date) &gt;= yr[1] & \n                   as.numeric(release_date) &lt;= yr[2])\n      }\n      \n      # Filter by node type\n      if (!is.null(input$nodeType) && input$nodeType != \"\") {\n        nodes &lt;- nodes %&gt;% filter(`Node Type` == input$nodeType)\n      }\n      \n      # Join genre info\n      edges &lt;- edges %&gt;%\n        left_join(nodes %&gt;% select(id, genre), by = c(\"source\" = \"id\")) %&gt;%\n        rename(source_genre = genre) %&gt;%\n        left_join(nodes %&gt;% select(id, genre), by = c(\"target\" = \"id\")) %&gt;%\n        rename(target_genre = genre)\n      \n      list(nodes = nodes, edges = edges)\n    })\n    \n    observe({\n      updateSelectInput(session, \"mainGenre\",\n                        choices = sort(unique(na.omit(nodes_df$genre))),\n                        selected = \"Oceanus Folk\")\n    })\n    \n    # Timeline trend plot: count genre nodes influenced by Oceanus Folk per year\n    output$trendPlot &lt;- renderPlotly({\n      data &lt;- filtered()$nodes\n      if (nrow(data) == 0) return(NULL)\n      # Extract year and count number of nodes per genre per year\n      df &lt;- data %&gt;% \n        filter(!is.na(release_date)) %&gt;%\n        mutate(Year = as.numeric(release_date)) %&gt;%\n        group_by(Year, genre) %&gt;%\n        summarize(Count = n(), .groups = 'drop')\n      if (nrow(df) == 0) return(NULL)\n      # Plot stacked area chart\n      p &lt;- ggplot(df, aes(x = Year, y = Count, fill = genre)) +\n        geom_area(alpha = 0.6) +\n        labs(x = \"Year\", y = \"Affected Count\", fill = \"Genre\") +\n        theme_minimal()\n      ggplotly(p)\n    })\n    \n    # Genre influence network: centered on Oceanus Folk showing influence connections\n    output$genreNetwork &lt;- renderVisNetwork({\n      data &lt;- filtered()\n      nodes &lt;- data$nodes\n      edges &lt;- data$edges\n      if (nrow(nodes) == 0 || nrow(edges) == 0) return(NULL)\n      \n      main_genre &lt;- input$mainGenre\n      \n      # Áî® all_nodes Ëé∑Âèñ‰∏ª genre ËäÇÁÇπ ID\n      main_ids &lt;- all_nodes %&gt;% filter(genre == main_genre) %&gt;% pull(id)\n      if (length(main_ids) == 0) return(NULL)\n      \n      if (input$hopDepth == 1) {\n        edges_sub &lt;- edges %&gt;% filter(source %in% main_ids | target %in% main_ids)\n        nodes_sub &lt;- nodes %&gt;% filter(id %in% unique(c(edges_sub$source, edges_sub$target)))\n      } else {\n        one_hop &lt;- edges %&gt;% filter(source %in% main_ids | target %in% main_ids) %&gt;%\n          pull(source, target) %&gt;% unlist() %&gt;% unique()\n        edges_sub &lt;- edges %&gt;% filter(source %in% c(main_ids, one_hop) | target %in% c(main_ids, one_hop))\n        nodes_sub &lt;- nodes %&gt;% filter(id %in% unique(c(edges_sub$source, edges_sub$target)))\n      }\n      \n      vis_nodes &lt;- data.frame(id = nodes_sub$id, label = nodes_sub$name,\n                              value = 10, group = nodes_sub$genre)\n      vis_edges &lt;- data.frame(from = edges_sub$source, to = edges_sub$target, arrows = \"to\")\n      \n      visNetwork(vis_nodes, vis_edges) %&gt;%\n        visOptions(highlightNearest = list(enabled = TRUE, degree = 1),\n                   nodesIdSelection = TRUE)\n    })\n    \n    # Sankey diagram: backflow influence from other genres to Oceanus Folk\n    output$genreSankey &lt;- renderSankeyNetwork({\n      data &lt;- filtered()$edges\n      nodes &lt;- filtered()$nodes\n      if (nrow(data) == 0 || nrow(nodes) == 0) return(NULL)\n      \n      main_genre &lt;- input$mainGenre\n      \n      # Filter for edges where only one side is Oceanus Folk\n      sankey_links &lt;- data %&gt;%\n        filter(\n          !is.na(source_genre) & !is.na(target_genre),\n          (target_genre != main_genre & source_genre == main_genre) |\n            (source_genre != main_genre & target_genre == main_genre)\n        ) %&gt;%\n        mutate(\n          FromGenre = ifelse(target_genre == main_genre, source_genre, target_genre),\n          ToGenre = main_genre\n        ) %&gt;%\n        group_by(FromGenre, ToGenre) %&gt;%\n        summarize(Value = n(), .groups = 'drop')\n    \n      \n      if (nrow(sankey_links) == 0) return(NULL)\n      \n      # Create nodes and links\n      sankey_nodes &lt;- data.frame(name = unique(c(sankey_links$FromGenre, sankey_links$ToGenre)))\n      sankey_links &lt;- sankey_links %&gt;%\n        mutate(\n          source = match(FromGenre, sankey_nodes$name) - 1,\n          target = match(ToGenre, sankey_nodes$name) - 1\n        )\n      \n      sankeyNetwork(\n        Links = sankey_links,\n        Nodes = sankey_nodes,\n        Source = \"source\",\n        Target = \"target\",\n        Value = \"Value\",\n        NodeID = \"name\",\n        fontSize = 12,\n        nodeWidth = 30\n      )\n      \n    })\n    \n    # Detail panel: show node details upon selection\n    output$detailPanel &lt;- renderUI({\n      # Assume visNetwork selection triggers input$genreNetwork_selected\n      sel_id &lt;- input$genreNetwork_selected\n      if (is.null(sel_id)) {\n        return(tags$p(\"Click a node in the network or Sankey diagram to view details.\"))\n      }\n      # Look up selected node information\n      node_row &lt;- nodes_df %&gt;% filter(id == sel_id)\n      if (nrow(node_row) == 0) return(NULL)\n      # Sample field extraction (adjust to your schema)\n      name    &lt;- node_row$name\n      works   &lt;- ifelse(!is.null(node_row$representative_works), node_row$representative_works, \"N/A\")\n      activeY &lt;- ifelse(!is.null(node_row$release_date), node_row$release_date, \"Unknown\")\n      # Check whether there is collaboration or similarity with Sailor Shift\n      sshift_id &lt;- nodes_df$id[nodes_df$name == \"Sailor Shift\"]\n      related &lt;- any(edges_df$Edge.Type %in% c(\"MemberOf\", \"InStyleOf\", \"LyricistOf\", \"LyricalReferenceTo\") &\n                       ((edges_df$source == sel_id & edges_df$target == sshift_id) |\n                          (edges_df$source == sshift_id & edges_df$target == sel_id)))\n      tagList(\n        h4(paste0(\"Name: \", name)),\n        p(paste0(\"Representative Works: \", works)),\n        p(paste0(\"Active Year: \", activeY)),\n        p(paste0(\"Collaboration / Style Similarity with Sailor Shift: \", ifelse(related, \"Yes\", \"No\")))\n      )\n    })"
  },
  {
    "objectID": "Storyboard.html#talent-radar-panel",
    "href": "Storyboard.html#talent-radar-panel",
    "title": "EchoScope‚Ñ¢ Prototype Storyboard",
    "section": "",
    "text": "Purpose\nCompare emerging artists based on graph features and scoring metrics to identify rising talent in a specific genre.\nKey Features üéØ Filter by Genre Users can focus on a specific musical style to narrow the artist pool.\n\nüéõ Customizable Score Weights Sliders allow users to adjust the importance of PageRank, Degree Centrality, Style Similarity, and Notable Works ‚Äî helping tailor the talent score to different discovery goals.\nüìä Radar Comparison Chart Visually compare up to 5 artists across the 4 scoring dimensions using an interactive radar plot.\nüìã Scoreboard Table A sortable, downloadable table summarizing talent scores and ranking details.\nüì• Export Results Allows users to download the scoring results as a CSV for further analysis or reporting.\n\nüì∏ Talent Radar Panel\nTalent Radar ‚Äì Score Explorer\nThe Score Explorer tab in the Talent Radar module is organized into two main sections:\n\nArtist Selection Controls (Left Pane)\n\nFilter by Genre\nChoose one or more music genres to limit which artists are considered.\nSelect Artists to Compare\nA searchable, multi-select dropdown that lists all artists active in the selected genre(s); up to five can be chosen for direct comparison.\n\nCustomize Score Weights (Left Pane)\n\nPageRank\n&gt; Indicates an artist‚Äôs global influence within the full network.\nDegree Centrality\n&gt; Counts the number of direct connections an artist has (collaborations, samples, covers, etc.).\nStyle Similarity\n&gt; Reflects how frequently an artist contributes to works in the selected genre(s).\nNotable Works Count\n&gt; The normalized count of an artist‚Äôs works flagged as ‚Äúnotable‚Äù in the dataset.\n\nVisualization Output (Right Pane)\n\nRadar Comparison (default)\nPlots each selected artist on a four-axis radar chart (PageRank, Degree, StyleSim, NotableCount), scaled 0‚Äì1, making it easy to see which artist leads on which metric.\nScoreboard\nA sortable, searchable table of the raw normalized scores and overall weighted score for each selected artist.\n\n\nThis layout enables interactive ‚Äúwhat-if‚Äù analysis: dragging the weight sliders immediately updates the radar and table, so stakeholders can experiment with different business priorities (e.g., favoring global influence vs.¬†genre specialization) to surface the most promising emerging talent.\n\nTalent Radar ‚Äì Scoreboard\nThe Scoreboard tab complements the Radar Comparison by showing the underlying normalized metrics and overall weighted scores in a familiar table format. Key features:\n\nEntries Selector\nControl the number of rows shown per page (10, 25, 50, 100) for quick paging through results.\nSearch Box\nFilter artists in real time by name or any score field.\nSortable Columns\nClick any column header (PageRank, Degree, StyleSim, NotableCountNorm, Score) to sort ascending/descending.\nDownload CSV\nExport the complete weighted scores dataset for offline analysis or reporting.\n\n\n\n\nUI Design + Server Planning Code\n\n\ntabItem(\n  tabName = \"talent\",\n  fluidRow(\n    column(4,\n      pickerInput(\"talent_genre\", \"Filter by Genre\", ...),\n      uiOutput(\"select_compare_artists\"),\n      sliderInput(\"weight_pagerank\", \"PageRank\", 0, 1, 0.3),\n      sliderInput(\"weight_degree\", \"Degree Centrality\", 0, 1, 0.2),\n      sliderInput(\"weight_similarity\", \"Style Similarity\", 0, 1, 0.3),\n      sliderInput(\"weight_notable_count\", \"Notable Works Count\", 0, 1, 0.2),\n      downloadButton(\"download_weighted_scores\", \"Download CSV\")\n    ),\n    column(8,\n      tabsetPanel(\n        tabPanel(\"Radar Comparison\", plotlyOutput(\"talent_radar_plot\")),\n        tabPanel(\"Scoreboard\", DTOutput(\"talent_score_table\"))\n      )\n    )\n  )\n)"
  },
  {
    "objectID": "Storyboard.html#trend-dashboard-panel",
    "href": "Storyboard.html#trend-dashboard-panel",
    "title": "EchoScope‚Ñ¢ Prototype Storyboard",
    "section": "",
    "text": "Purpose Enable high-level insights export and macro filtering across all trends.\n\nKey Features Select multiple genres\nChoose analysis layers (e.g., cumulative, normalized)\nExport raw data as CSV\n\nüì∏ Screenshot of Trend Dashboard Panel\n\n\nUI Design + Server Planning Code\n\ntabItem(\n  tabName = \"trend\",\n  fluidRow(\n    column(4,\n      pickerInput(\"trend_genre\", \"Select Genre(s)\", ...),\n      checkboxGroupInput(\"trend_layers\", \"Show Layers\", choices = ...),\n      downloadButton(\"download_trend_data\", \"Export Trend Data\")\n    ),\n    column(8, plotlyOutput(\"trend_area_plot\"))\n  )\n)"
  }
]