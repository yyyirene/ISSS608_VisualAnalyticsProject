"#FA7268",  # Album (salmon)
"#34B1C4"   # MusicalGroup (aqua)
)
node_types <- node_types %>%
mutate(text_color = ifelse(n > 1000, "white", "black"),
text_hjust = ifelse(n > 1000, 1.1, -0.1))
ggplot(node_types, aes(x = reorder(`Node Type`, n), y = n, fill = `Node Type`)) +
geom_col(width = 0.65, show.legend = FALSE) +
geom_text(aes(label = n, hjust = text_hjust, color = text_color),
size = 4.5, fontface = "bold") +
coord_flip(clip = "off") +
scale_fill_manual(values = genre_palette) +
scale_color_identity() +
labs(
title = "<b style='font-size:20pt;'>Node Type Distribution</b>",
subtitle = "<span style='color:#666666;'>Count of each node type in the knowledge graph</span>",
x = NULL,
y = NULL
) +
theme_minimal(base_family = "Helvetica Neue") +
theme(
panel.grid = element_blank(),
axis.text.y = element_text(face = "bold", size = 13, color = "#222222"),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.title = element_markdown(size = 20, face = "bold", hjust = 0),
plot.subtitle = element_markdown(size = 13, hjust = 0),
plot.margin = margin(10, 60, 30, 10)
)
# Total number of nodes and edges
total_nodes <- nrow(nodes_tbl)
total_edges <- nrow(edges_tbl)
# Unique node types
node_types <- nodes_tbl %>% count(`Node Type`, sort = TRUE)
# Unique edge types
edge_types <- edges_tbl %>% count(`Edge Type`, sort = TRUE)
list(
Total_Nodes = total_nodes,
Total_Edges = total_edges,
Node_Types = node_types,
Edge_Types = edge_types
)
# Custom palette inspired by genre styles
genre_palette <- c(
"#A566FF",  # Person (lavender)
"#2ECC71",  # Song (green)
"#1C1C1E",  # RecordLabel (black)
"#FA7268",  # Album (salmon)
"#34B1C4"   # MusicalGroup (aqua)
)
node_types <- node_types %>%
mutate(text_color = ifelse(n > 1000, "white", "black"),
text_hjust = ifelse(n > 1000, 1.1, -0.1))
ggplot(node_types, aes(x = reorder(`Node Type`, n), y = n, fill = `Node Type`)) +
geom_col(width = 0.65, show.legend = FALSE) +
geom_text(aes(label = n, hjust = text_hjust, color = text_color),
size = 4.5, fontface = "bold") +
coord_flip(clip = "off") +
scale_fill_manual(values = genre_palette) +
scale_color_identity() +
labs(
title = "<b style='font-size:20pt;'>Node Type Distribution</b>",
subtitle = "<span style='color:#666666;'>Count of each node type in the knowledge graph</span>",
x = NULL,
y = NULL
) +
theme_minimal(base_family = "Helvetica Neue") +
theme(
panel.grid = element_blank(),
axis.text.y = element_text(face = "bold", size = 13, color = "#222222"),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.title = element_markdown(size = 20, face = "bold", hjust = 0),
plot.subtitle = element_markdown(size = 13, hjust = 0),
plot.margin = margin(10, 60, 30, 10)
)
# Step 1: Count each node type from your nodes_tbl
node_types <- nodes_tbl %>%
count(`Node Type`) %>%
arrange(desc(n))
# Step 2: Set custom palette by node type (ensure all types are covered)
genre_palette <- c(
"Person" = "#A566FF",        # lavender
"Song" = "#2ECC71",          # green
"RecordLabel" = "#1C1C1E",   # black
"Album" = "#FA7268",         # salmon
"MusicalGroup" = "#34B1C4"   # aqua
)
# Step 3: Add label color and alignment based on value size
node_types <- node_types %>%
mutate(
text_color = ifelse(n > 1000, "white", "black"),
text_hjust = ifelse(n > 1000, 1.1, -0.1)
)
# Step 4: Plot
ggplot(node_types, aes(x = reorder(`Node Type`, n), y = n, fill = `Node Type`)) +
geom_col(width = 0.65, show.legend = FALSE) +
geom_text(aes(label = n, hjust = text_hjust, color = text_color),
size = 4.5, fontface = "bold") +
coord_flip(clip = "off") +
scale_fill_manual(values = genre_palette) +
scale_color_identity() +
labs(
title = "<b style='font-size:20pt;'>Node Type Distribution</b>",
subtitle = "<span style='color:#666666;'>Count of each node type in the knowledge graph</span>",
x = NULL,
y = NULL
) +
theme_minimal(base_family = "Helvetica Neue") +
theme(
panel.grid = element_blank(),
axis.text.y = element_text(face = "bold", size = 13, color = "#222222"),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.title = element_markdown(size = 20, face = "bold", hjust = 0),
plot.subtitle = element_markdown(size = 13, hjust = 0),
plot.margin = margin(10, 60, 30, 10)
)
pacman::p_load(tidyverse, jsonlite,
tidygraph, ggraph,ggplot2,SmartEDA,igraph,visNetwork,DiagrammeR,ggtext)
glimpse(kg)
# Step 1: Count each node type from your nodes_tbl
node_types <- nodes_tbl %>%
count(`Node Type`) %>%
arrange(desc(n))
# Step 2: Set custom palette by node type (ensure all types are covered)
genre_palette <- c(
"Person" = "#A566FF",        # lavender
"Song" = "#2ECC71",          # green
"RecordLabel" = "#1C1C1E",   # black
"Album" = "#FA7268",         # salmon
"MusicalGroup" = "#34B1C4"   # aqua
)
# Step 3: Add label color and alignment based on value size
node_types <- node_types %>%
mutate(
text_color = ifelse(n > 1000, "white", "black"),
text_hjust = ifelse(n > 1000, 1.1, -0.1)
)
# Step 4: Plot
ggplot(node_types, aes(x = reorder(`Node Type`, n), y = n, fill = `Node Type`)) +
geom_col(width = 0.65, show.legend = FALSE) +
geom_text(aes(label = n, hjust = text_hjust, color = text_color),
size = 4.5, fontface = "bold") +
coord_flip(clip = "off") +
scale_fill_manual(values = genre_palette) +
scale_color_identity() +
labs(
title = "<b style='font-size:20pt;'>Node Type Distribution</b>",
subtitle = "<span style='color:#666666;'>Count of each node type in the knowledge graph</span>",
x = NULL,
y = NULL
) +
theme_minimal(base_family = "Helvetica Neue") +
theme(
panel.grid = element_blank(),
axis.text.y = element_text(face = "bold", size = 13, color = "#222222"),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.title = element_markdown(size = 20, face = "bold", hjust = 0),
plot.subtitle = element_markdown(size = 13, hjust = 0),
plot.margin = margin(10, 60, 30, 10)
)
# Count edge types
edge_types <- edges_tbl %>%
count(`Edge Type`) %>%
arrange(desc(n))
# Set palette and label alignment
edge_palette <- c("#CA5310", "#F5C518", "#E5989B", "#38B000", "#2D3142", "#06D6A0",
"#83C5BE", "#F4A261", "#F6BD60", "#A9DEF9", "#CBAACB", "#9B5DE5")
edge_types <- edge_types %>%
mutate(
text_color = ifelse(n > 2000, "white", "black"),
text_hjust = ifelse(n > 2000, 1.1, -0.1)
)
# Plot
ggplot(edge_types, aes(x = reorder(`Edge Type`, n), y = n, fill = `Edge Type`)) +
geom_col(width = 0.65, show.legend = FALSE) +
geom_text(aes(label = n, hjust = text_hjust, color = text_color),
size = 4.5, fontface = "bold") +
coord_flip(clip = "off") +
scale_fill_manual(values = edge_palette) +
scale_color_identity() +
labs(
title = "<b style='font-size:20pt;'>Edge Type Distribution</b>",
subtitle = "<span style='color:#666666;'>Types and frequency of relationships in the knowledge graph</span>",
x = NULL,
y = NULL
) +
theme_minimal(base_family = "Helvetica Neue") +
theme(
panel.grid = element_blank(),
axis.text.y = element_text(face = "bold", size = 13, color = "#222222"),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.title = element_markdown(size = 20, face = "bold", hjust = 0),
plot.subtitle = element_markdown(size = 13, hjust = 0),
plot.margin = margin(10, 60, 30, 10)
)
str(kg, max.level = 1)
nodes_tbl <- as_tibble(kg$nodes)
edges_tbl <- as_tibble(kg$links)
# Count edge types
edge_types <- edges_tbl %>%
count(`Edge Type`) %>%
arrange(desc(n))
# Set palette and label alignment
edge_palette <- c("#CA5310", "#F5C518", "#E5989B", "#38B000", "#2D3142", "#06D6A0",
"#83C5BE", "#F4A261", "#F6BD60", "#A9DEF9", "#CBAACB", "#9B5DE5")
edge_types <- edge_types %>%
mutate(
text_color = ifelse(n > 2000, "white", "black"),
text_hjust = ifelse(n > 2000, 1.1, -0.1)
)
# Plot
ggplot(edge_types, aes(x = reorder(`Edge Type`, n), y = n, fill = `Edge Type`)) +
geom_col(width = 0.65, show.legend = FALSE) +
geom_text(aes(label = n, hjust = text_hjust, color = text_color),
size = 4.5, fontface = "bold") +
coord_flip(clip = "off") +
scale_fill_manual(values = edge_palette) +
scale_color_identity() +
labs(
title = "<b style='font-size:20pt;'>Edge Type Distribution</b>",
subtitle = "<span style='color:#666666;'>Types and frequency of relationships in the knowledge graph</span>",
x = NULL,
y = NULL
) +
theme_minimal(base_family = "Helvetica Neue") +
theme(
panel.grid = element_blank(),
axis.text.y = element_text(face = "bold", size = 13, color = "#222222"),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.title = element_markdown(size = 20, face = "bold", hjust = 0),
plot.subtitle = element_markdown(size = 13, hjust = 0),
plot.margin = margin(10, 60, 30, 10)
)
#| code-fold: true
#| code-summary: "Edge Type Distribution"
# Step 1: Count each node type from your nodes_tbl
node_types <- nodes_tbl %>%
count(`Node Type`) %>%
arrange(desc(n))
# Step 2: Set custom palette by node type (ensure all types are covered)
genre_palette <- c(
"Person" = "#A566FF",        # lavender
"Song" = "#2ECC71",          # green
"RecordLabel" = "#1C1C1E",   # black
"Album" = "#FA7268",         # salmon
"MusicalGroup" = "#34B1C4"   # aqua
)
# Step 3: Add label color and alignment based on value size
node_types <- node_types %>%
mutate(
text_color = ifelse(n > 1000, "white", "black"),
text_hjust = ifelse(n > 1000, 1.1, -0.1)
)
# Step 4: Plot
ggplot(node_types, aes(x = reorder(`Node Type`, n), y = n, fill = `Node Type`)) +
geom_col(width = 0.65, show.legend = FALSE) +
geom_text(aes(label = n, hjust = text_hjust, color = text_color),
size = 4.5, fontface = "bold") +
coord_flip(clip = "off") +
scale_fill_manual(values = genre_palette) +
scale_color_identity() +
labs(
title = "<b style='font-size:20pt;'>Node Type Distribution</b>",
subtitle = "<span style='color:#666666;'>Count of each node type in the knowledge graph</span>",
x = NULL,
y = NULL
) +
theme_minimal(base_family = "Helvetica Neue") +
theme(
panel.grid = element_blank(),
axis.text.y = element_text(face = "bold", size = 13, color = "#222222"),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.title = element_markdown(size = 20, face = "bold", hjust = 0),
plot.subtitle = element_markdown(size = 13, hjust = 0),
plot.margin = margin(10, 60, 30, 10)
)
edges_1st_full_named <- edges_1st %>%
left_join(nodes_all %>% select(name, `Node Type`) %>%
rename(from = name, `From Type` = `Node Type`), by = "from") %>%
left_join(nodes_all %>% select(name, `Node Type`, release_date, genre, notable, notoriety_date) %>%
rename(to = name, `To Type` = `Node Type`, `To Release` = release_date,
`To Genre` = genre, `To Notable` = notable, `To Notoriety Date` = notoriety_date),
by = "to") %>%
select(from, `From Type`, to, `To Type`, `Edge Type`, `To Release`, `To Genre`, `To Notable`, `To Notoriety Date`)
edges_1st_full_named <- edges_1st %>%
left_join(nodes_all %>% select(name, `Node Type`) %>%
rename(from = name, `From Type` = `Node Type`), by = "from") %>%
left_join(nodes_all %>% select(name, `Node Type`, release_date, genre, notable, notoriety_date) %>%
rename(to = name, `To Type` = `Node Type`, `To Release` = release_date,
`To Genre` = genre, `To Notable` = notable, `To Notoriety Date` = notoriety_date),
by = "to") %>%
select(from, `From Type`, to, `To Type`, `Edge Type`, `To Release`, `To Genre`, `To Notable`, `To Notoriety Date`)
#| code-fold: true
#| code-summary: "First examined what she had produced"
subgraph_in <- extract_subnetwork(
graph,
node_name = "Sailor Shift",
distance = 5,
direction = "out"
)
subgraph_igraph <- as.igraph(subgraph_in)
nodes_all <- igraph::as_data_frame(subgraph_igraph, what = "vertices")
edges_all <- igraph::as_data_frame(subgraph_igraph, what = "edges")
sailor_id <- nodes_all$name[nodes_all$name == "Sailor Shift"]
edges_1st <- edges_all %>% filter(from == "Sailor Shift")
valid_targets <- edges_1st %>%
left_join(nodes_all, by = c("to" = "name")) %>%
filter(`Node Type` %in% c("MusicalGroup", "Song", "Album","RecordLabel")) %>%
pull(to)
valid_node_ids <- unique(c("Sailor Shift", valid_targets))
edges_vn <- edges_all %>%
filter(from %in% valid_node_ids | to %in% valid_node_ids)
used_nodes <- unique(c(edges_vn$from, edges_vn$to))
nodes_vn <- nodes_all %>%
filter(name %in% used_nodes) %>%
mutate(id = name, label = name, group = `Node Type`)
edges_vn <- edges_vn %>%
mutate(
label = `Edge Type`,
title = paste0("Edge Type: ", `Edge Type`)
)
#| code-fold: true
#| code-summary: "Extract_subnetwork "
extract_subnetwork <- function(graph, node_name,
distance = NULL,
direction = c("all", "in", "out"),
edge_types = NULL,
node_types = NULL) {
direction <- match.arg(direction)
node <- which(V(graph)$name == node_name)
if (length(node) == 0) stop("Node name not found in graph.")
distance <- ifelse(is.null(distance), length(graph), distance)
mode <- switch(direction,
all = "all",
`in` = "in",
out = "out")
igraph_subgraph <- induced_subgraph(graph, vids = ego(graph, node, order = distance, mode = mode)[[1]])
nodes_df <- igraph::as_data_frame(igraph_subgraph, what = "vertices")
edges_df <- igraph::as_data_frame(igraph_subgraph, what = "edges")
if (!is.null(edge_types)) {
edges_df <- edges_df %>% dplyr::filter(`Edge Type` %in% edge_types)
}
if (!is.null(node_types)) {
nodes_df <- nodes_df %>% dplyr::filter(`Node Type` %in% node_types)
}
used_node_ids <- unique(c(edges_df$from, edges_df$to))
nodes_df <- nodes_df %>% dplyr::filter(name %in% used_node_ids)
tidygraph::tbl_graph(nodes = nodes_df, edges = edges_df, directed = igraph::is_directed(graph))
}
#| code-fold: true
#| code-summary: "First examined what she had produced"
subgraph_in <- extract_subnetwork(
graph,
node_name = "Sailor Shift",
distance = 5,
direction = "out"
)
graph <- tbl_graph(nodes = nodes_tbl,
edges = edges_tbl,
directed = kg$directed)
graph <- tbl_graph(nodes = nodes_tbl,
edges = edges_tbl,
directed = kg$directed)
nodes_tbl <- as_tibble(kg$nodes)
edges_tbl <- as_tibble(kg$links)
graph <- tbl_graph(nodes = nodes_tbl,
edges = edges_tbl,
directed = kg$directed)
id_map <- tibble(id = nodes_tbl$id,  #Retrieve the ID column of each row node
index = seq_len(
nrow(nodes_tbl)))  #Generate a line number sequence from 1 to n
edges_tbl <- edges_tbl %>%
left_join(id_map, by = c("source" = "id")) %>%  # source id → from index
rename(from = index) %>%
left_join(id_map, by = c("target" = "id")) %>%  # target id → to index
rename(to = index)
table(edges_tbl$`Edge Type`)
edges_tbl <- edges_tbl %>%
filter(!is.na(from), !is.na(to))
graph <- tbl_graph(nodes = nodes_tbl,
edges = edges_tbl,
directed = kg$directed)
graph
class(graph)
#| code-fold: true
#| code-summary: "Extract_subnetwork "
extract_subnetwork <- function(graph, node_name,
distance = NULL,
direction = c("all", "in", "out"),
edge_types = NULL,
node_types = NULL) {
direction <- match.arg(direction)
node <- which(V(graph)$name == node_name)
if (length(node) == 0) stop("Node name not found in graph.")
distance <- ifelse(is.null(distance), length(graph), distance)
mode <- switch(direction,
all = "all",
`in` = "in",
out = "out")
igraph_subgraph <- induced_subgraph(graph, vids = ego(graph, node, order = distance, mode = mode)[[1]])
nodes_df <- igraph::as_data_frame(igraph_subgraph, what = "vertices")
edges_df <- igraph::as_data_frame(igraph_subgraph, what = "edges")
if (!is.null(edge_types)) {
edges_df <- edges_df %>% dplyr::filter(`Edge Type` %in% edge_types)
}
if (!is.null(node_types)) {
nodes_df <- nodes_df %>% dplyr::filter(`Node Type` %in% node_types)
}
used_node_ids <- unique(c(edges_df$from, edges_df$to))
nodes_df <- nodes_df %>% dplyr::filter(name %in% used_node_ids)
tidygraph::tbl_graph(nodes = nodes_df, edges = edges_df, directed = igraph::is_directed(graph))
}
#| code-fold: true
#| code-summary: "First examined what she had produced"
subgraph_in <- extract_subnetwork(
graph,
node_name = "Sailor Shift",
distance = 5,
direction = "out"
)
subgraph_igraph <- as.igraph(subgraph_in)
nodes_all <- igraph::as_data_frame(subgraph_igraph, what = "vertices")
edges_all <- igraph::as_data_frame(subgraph_igraph, what = "edges")
sailor_id <- nodes_all$name[nodes_all$name == "Sailor Shift"]
edges_1st <- edges_all %>% filter(from == "Sailor Shift")
valid_targets <- edges_1st %>%
left_join(nodes_all, by = c("to" = "name")) %>%
filter(`Node Type` %in% c("MusicalGroup", "Song", "Album","RecordLabel")) %>%
pull(to)
valid_node_ids <- unique(c("Sailor Shift", valid_targets))
edges_vn <- edges_all %>%
filter(from %in% valid_node_ids | to %in% valid_node_ids)
used_nodes <- unique(c(edges_vn$from, edges_vn$to))
nodes_vn <- nodes_all %>%
filter(name %in% used_nodes) %>%
mutate(id = name, label = name, group = `Node Type`)
edges_vn <- edges_vn %>%
mutate(
label = `Edge Type`,
title = paste0("Edge Type: ", `Edge Type`)
)
visNetwork(nodes_vn, edges_vn, height = "800px", width = "100%") %>%
visEdges(
arrows = "to",
font = list(
size = 12,
align = "middle",
color = "black"
)
) %>%
visOptions(
highlightNearest = list(enabled = TRUE, degree = 4, hover = TRUE),
nodesIdSelection = TRUE,
selectedBy = "group"
) %>%
visLegend() %>%
visLayout(randomSeed = 1234) %>%
visInteraction(navigationButtons = TRUE)
edges_1st_full_named <- edges_1st %>%
left_join(nodes_all %>% select(name, `Node Type`) %>%
rename(from = name, `From Type` = `Node Type`), by = "from") %>%
left_join(nodes_all %>% select(name, `Node Type`, release_date, genre, notable, notoriety_date) %>%
rename(to = name, `To Type` = `Node Type`, `To Release` = release_date,
`To Genre` = genre, `To Notable` = notable, `To Notoriety Date` = notoriety_date),
by = "to") %>%
select(from, `From Type`, to, `To Type`, `Edge Type`, `To Release`, `To Genre`, `To Notable`, `To Notoriety Date`)
knitr::kable(edges_1st_full_named)
selected_types <- c("DirectlySamples")
edges_selected <- edges_1st_full_named %>%
filter(`Edge Type` %in% selected_types)
knitr::kable(edges_selected)
edges_1st_filtered <- edges_1st_full_named %>%
filter(`Edge Type` %in% c("LyricistOf", "PerformerOf", "MemberOf"))
knitr::kable(edges_1st_filtered)
#| code-fold: true
#| code-summary: "All the connect from Sailor-Song & Album & Group"
edge_colors <- c(
"PerformerOf"         = "#2ca02c",
"LyricistOf"          = "#1f77b4",
"MemberOf"            = "#d62728"
)
nodes_subgraph <- nodes_all %>%
filter(name %in% c("Sailor Shift", edges_1st_filtered$to)) %>%
transmute(id = name, label = name, group = `Node Type`)
edges_subgraph <- edges_1st_filtered %>%
left_join(
nodes_all %>% select(name, `Node Type`) %>% rename(to = name, to_type = `Node Type`),
by = "to"
) %>%
mutate(
color = edge_colors[`Edge Type`],
title = paste0("Edge Type: ", `Edge Type`, "<br>To Type: ", to_type)
) %>%
transmute(
from = from,
to = to,
title = title,
color = color,
arrows = "to"
)
edge_legend <- data.frame(
label = names(edge_colors),
color = unname(edge_colors),
arrows = rep("to", length(edge_colors)),
stringsAsFactors = FALSE
)
